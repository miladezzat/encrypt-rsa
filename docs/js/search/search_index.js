var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/NodeRSA.html",[0,0.866,1,1.088]],["body/classes/NodeRSA.html",[0,0.99,1,1.416,2,0.979,3,0.979,4,0.979,5,0.58,6,0.739,7,1.533,8,1.217,9,2.076,10,2.643,11,1.414,12,1.71,13,1.489,14,0.987,15,1.613,16,2.046,17,1.837,18,1.217,19,1.217,20,1.243,21,1.23,22,0.367,23,0.956,24,2.057,25,1.858,26,2.838,27,2.772,28,1.219,29,0.642,30,1.217,31,1.414,32,0.642,33,1.217,34,1.414,35,0.739,36,1.217,37,2.032,38,3.503,39,1.613,40,1.613,41,0.605,42,1.217,43,2.205,44,0.091,45,1.858,46,1.734,47,2.205,48,2.638,49,1.54,50,1.858,51,1.858,52,2.141,53,1.613,54,1.682,55,0.979,56,1.217,57,1.219,58,2.838,59,0.979,60,1.799,61,0.979,62,1.219,63,0.979,64,1.217,65,0.956,66,1.217,67,0.761,68,0.462,69,1.552,70,2.148,71,1.125,72,1.217,73,0.956,74,1.244,75,0.979,76,1.682,77,2.205,78,2.366,79,2.076,80,1.71,81,1.682,82,2.386,83,1.613,84,0.979,85,2.057,86,1.287,87,0.956,88,1.244,89,0.979,90,0.956,91,1.244,92,0.979,93,1.682,94,1.613,95,0.979,96,0.956,97,1.244,98,0.979,99,2.264,100,0.58,101,0.979,102,0.979,103,0.979,104,0.979,105,0.979,106,0.979,107,0.979,108,3.503,109,0.979,110,2.057,111,2.057,112,1.613,113,2.141,114,1.778,115,1.613,116,1.613,117,0.979,118,1.613,119,0.979,120,0.979,121,0.979,122,0.979,123,0.979,124,0.979,125,0.033,126,0.033]],["title/changelog.html",[127,1.166,128,1.166,129,1.485]],["body/changelog.html",[5,1.038,11,1.502,14,0.962,17,1.195,20,0.747,21,0.747,29,0.673,32,0.737,41,1.298,44,0.085,86,0.658,125,0.052,126,0.052,129,1.322,130,1.753,131,3.01,132,1.322,133,1.753,134,1.753,135,1.753,136,0.827,137,1.322,138,1.753,139,1.322,140,3.94,141,2.534,142,1.753,143,3.607,144,2.534,145,2.927,146,2.977,147,1.753,148,2.534,149,2.534,150,1.753,151,2.534,152,1.753,153,1.753,154,1.753,155,1.753,156,3.46,157,3.46,158,3.991,159,1.753,160,1.753,161,4.131,162,2.534,163,2.534,164,2.246,165,1.753,166,1.753,167,1.753,168,1.753,169,1.753,170,3.607,171,3.607,172,1.753,173,1.753,174,1.753,175,1.753,176,1.753,177,1.753,178,1.753,179,1.753,180,0.827,181,1.753,182,1.753,183,0.827,184,1.912,185,1.753,186,1.753,187,2.534,188,3.607,189,1.753,190,2.977,191,2.246,192,2.534,193,2.534,194,1.912,195,1.038,196,1.753,197,1.753,198,1.753,199,1.753,200,1.753,201,3.719,202,3.262,203,1.753,204,1.753,205,1.753,206,1.753,207,3.991,208,1.753,209,1.753,210,2.257,211,1.753,212,1.753,213,1.912,214,1.322,215,1.753,216,1.753,217,1.753,218,1.753,219,1.753,220,1.753,221,1.753,222,2.534,223,3.607,224,2.534,225,1.753,226,1.753,227,1.753,228,1.753,229,1.753,230,1.753,231,1.322,232,1.753,233,0.827,234,1.753,235,1.322,236,0.827,237,0.827,238,1.753,239,1.753,240,1.753,241,1.753,242,1.753,243,1.753,244,1.322,245,1.753,246,1.753,247,1.753,248,1.753,249,1.753,250,3.095,251,1.322,252,1.753,253,1.753,254,1.753,255,2.977,256,1.322,257,1.753,258,1.753,259,1.753,260,1.753,261,1.753,262,1.753,263,1.753,264,3.88,265,2.534,266,1.753,267,2.534,268,1.753,269,1.753,270,1.753,271,2.534,272,2.534,273,1.753]],["title/coverage.html",[274,2.314]],["body/coverage.html",[0,1.102,1,1.385,5,1.74,6,2.216,28,1.74,29,0.664,31,1.74,32,0.664,34,1.74,41,1.102,44,0.089,46,1.385,100,1.74,125,0.073,126,0.073,183,1.974,210,1.74,236,1.385,237,1.385,274,2.216,275,2.937,276,2.937,277,2.216,278,4.308,279,4.277,280,2.216,281,2.216,282,2.216,283,2.216,284,2.216,285,2.937,286,2.699,287,3.577,288,2.937,289,2.937]],["title/miscellaneous/functions.html",[180,1.298,290,0.58]],["body/miscellaneous/functions.html",[7,1.724,12,1.815,13,1.59,14,0.979,16,1.999,17,1.23,19,1.375,20,1.172,21,1.155,22,0.684,25,1.08,28,1.545,29,0.794,31,1.545,32,0.751,34,1.545,37,1.545,43,2.166,44,0.085,45,2.166,46,1.724,47,2.166,49,1.596,50,1.803,51,1.803,52,1.967,54,2.166,56,1.375,57,1.545,62,1.08,65,1.08,67,0.86,68,0.86,70,2.23,71,0.86,72,1.375,73,1.08,74,1.23,76,1.803,77,1.968,79,1.803,80,1.815,81,1.545,86,1.525,87,1.08,88,1.23,90,1.08,91,1.23,93,1.968,96,1.08,97,1.23,100,1.545,125,0.053,126,0.053,136,0.86,180,0.86,183,1.724,195,1.545,233,0.86,277,1.375,280,1.375,281,1.375,282,1.375,283,1.375,284,1.375,290,0.537,291,1.823,292,1.823,293,1.823,294,1.823,295,1.823,296,1.823,297,1.375,298,2.296,299,2.903,300,1.823,301,2.607,302,2.607,303,2.607,304,2.607,305,1.545,306,1.823,307,1.823,308,1.967,309,1.823,310,1.823,311,1.823,312,2.651,313,1.375,314,1.823,315,2.651,316,2.651,317,1.823,318,1.823,319,1.803,320,1.967,321,1.823,322,2.607,323,2.607,324,2.607]],["title/index.html",[22,0.738,127,1.166,128,1.166]],["body/index.html",[0,0.726,1,1.758,7,0.912,8,0.925,9,0.727,10,0.925,11,1.419,12,0.578,13,1.51,14,0.872,16,1.978,17,1.609,18,0.925,20,1.035,21,1.035,25,1.419,26,2.948,27,2.92,29,0.437,30,0.925,32,0.711,33,0.925,35,0.925,36,0.925,37,1.146,41,1.11,42,1.459,44,0.089,45,1.146,47,1.753,49,1.519,50,1.611,51,1.611,54,1.419,57,0.727,60,1.807,62,0.727,65,1.611,66,2.232,67,0.912,69,0.925,70,1.753,71,0.912,73,0.727,74,0.912,76,1.419,77,1.611,79,1.146,80,1.874,81,1.146,86,1.28,87,0.727,88,0.912,90,0.727,91,0.912,93,1.419,96,0.727,97,0.912,99,0.925,113,2.973,125,0.04,126,0.04,131,2.051,132,1.459,136,0.578,137,1.807,145,0.925,164,0.925,180,0.578,184,1.807,194,0.925,213,0.925,214,1.459,231,0.925,233,0.912,235,0.925,236,0.578,237,0.578,251,0.925,297,0.925,298,1.807,305,0.727,308,0.925,315,2.232,316,2.232,319,0.727,325,2.719,326,1.226,327,1.146,328,1.226,329,1.226,330,1.934,331,2.395,332,2.395,333,1.226,334,1.934,335,3.411,336,1.934,337,1.934,338,2.395,339,1.226,340,1.226,341,1.226,342,1.226,343,1.226,344,4.089,345,1.226,346,1.226,347,1.226,348,1.226,349,1.226,350,1.226,351,1.226,352,1.934,353,1.226,354,1.226,355,1.226,356,1.226,357,1.934,358,1.934,359,2.719,360,2.395,361,2.395,362,1.934,363,1.934,364,2.395,365,2.959,366,1.226,367,1.226,368,1.226,369,1.226,370,1.226,371,2.719,372,1.226,373,1.226,374,1.226,375,1.226,376,1.226,377,2.395,378,1.226,379,1.226,380,1.226,381,1.226,382,1.226,383,1.226,384,2.395,385,1.226,386,2.395,387,1.226,388,1.226,389,1.226,390,1.226,391,1.934,392,1.226,393,2.719,394,1.226,395,1.226,396,1.934,397,1.226,398,1.226,399,1.226,400,1.226,401,1.226,402,1.226,403,1.934,404,1.226,405,1.226,406,1.226,407,1.934,408,1.934,409,1.226,410,1.226,411,1.226,412,1.226,413,1.226,414,1.226,415,1.934,416,1.226,417,1.226,418,1.226,419,1.226,420,1.226,421,1.226,422,1.226,423,1.226,424,1.226,425,1.226,426,1.226,427,1.226,428,1.226,429,1.226,430,1.226,431,2.395,432,1.226,433,1.226,434,1.226,435,2.051,436,1.934,437,1.934,438,1.226,439,1.226,440,2.719,441,1.226,442,0.925,443,1.226,444,2.719,445,1.226,446,1.226,447,1.226,448,1.934,449,1.226,450,1.226,451,1.226,452,1.226,453,1.226,454,1.934,455,1.226,456,1.226,457,1.226,458,1.226,459,1.226,460,1.934,461,1.226,462,1.934,463,1.934,464,1.934,465,1.226,466,1.226,467,1.226,468,1.226,469,1.226,470,1.226,471,1.226,472,1.226,473,1.934,474,1.226,475,1.226,476,1.226,477,1.226,478,1.226,479,1.226,480,1.226,481,1.226,482,1.226,483,1.226]],["title/license.html",[127,1.166,128,1.166,484,1.166]],["body/license.html",[44,0.07,78,2.585,125,0.07,126,0.07,210,1.624,250,2.067,312,2.067,313,2.067,327,2.031,484,1.624,485,2.74,486,3.74,487,2.74,488,2.067,489,2.74,490,3.427,491,2.74,492,2.74,493,2.74,494,2.74,495,2.74,496,2.74,497,3.427,498,4.258,499,2.74,500,2.74,501,2.74,502,3.74,503,2.74,504,2.74,505,2.74,506,2.74,507,2.74,508,2.74,509,2.74,510,2.74,511,2.74,512,2.74,513,3.427,514,2.74,515,2.74,516,2.74,517,2.74,518,2.74,519,2.74,520,2.74,521,3.427,522,3.427,523,2.74,524,2.74,525,2.74,526,2.74,527,2.74,528,2.74,529,2.74,530,2.74,531,2.74,532,2.74,533,2.74,534,2.74,535,2.74,536,2.74,537,2.74,538,2.74,539,2.74,540,2.74,541,2.74,542,2.74,543,2.74,544,2.74,545,2.74,546,2.74,547,2.74,548,2.74,549,2.74,550,2.74,551,2.74]],["title/modules.html",[552,2.314]],["body/modules.html",[44,0.081,125,0.081,126,0.081,552,2.602]],["title/overview.html",[553,2.314]],["body/overview.html",[0,1.287,44,0.08,125,0.08,126,0.08,553,2.588,554,3.43]],["title/properties.html",[23,1.631,555,1.968]],["body/properties.html",[7,1.359,9,2.267,13,1.599,14,1.043,20,1.128,21,1.128,23,1.708,29,0.799,32,0.902,44,0.088,49,1.497,125,0.072,126,0.072,136,1.359,139,2.174,191,2.886,233,1.359,244,2.174,256,2.174,327,1.708,435,2.174,442,2.174,484,1.708,488,2.174,556,2.882,557,2.882,558,2.882,559,2.882,560,2.882,561,2.882,562,2.882,563,2.882,564,2.882,565,2.882,566,2.882,567,2.882,568,2.882,569,2.882,570,2.882,571,2.882,572,2.882,573,2.882,574,2.882]],["title/miscellaneous/typealiases.html",[290,0.58,575,2.752]],["body/miscellaneous/typealiases.html",[12,1.877,13,1.074,14,0.844,20,1.038,21,1.038,22,1.074,29,0.796,32,0.796,43,2.358,44,0.072,46,2.046,49,1.493,64,2.159,68,1.35,71,1.661,74,1.661,80,1.877,88,1.661,91,1.661,97,1.661,114,1.696,125,0.072,126,0.072,183,1.35,290,0.844,576,2.862,577,4.086,578,2.862,579,4.086,580,3.979,581,4.086]],["title/miscellaneous/variables.html",[290,0.58,582,2.076]],["body/miscellaneous/variables.html",[16,2.035,22,1.069,41,1.317,44,0.091,67,1.656,68,1.656,86,1.49,114,2.08,125,0.072,126,0.072,195,2.255,236,1.795,237,1.795,286,2.149,290,0.84,299,2.648,305,1.688,319,1.688,320,2.871,582,2.149,583,3.511,584,3.511,585,3.511,586,3.511,587,2.848,588,3.511,589,3.511,590,3.511,591,3.511,592,2.848]]],"invertedIndex":[["",{"_index":44,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["005cf394",{"_index":196,"title":{},"body":{"changelog.html":{}}}],["00bd0481",{"_index":220,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":198,"title":{},"body":{"changelog.html":{}}}],["01288ba",{"_index":185,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":188,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":227,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":203,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":170,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":202,"title":{},"body":{"changelog.html":{}}}],["065b843",{"_index":147,"title":{},"body":{"changelog.html":{}}}],["06a02399",{"_index":209,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":161,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":154,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":151,"title":{},"body":{"changelog.html":{}}}],["0e0f4c9e",{"_index":211,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":554,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":273,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":270,"title":{},"body":{"changelog.html":{}}}],["1.0.10",{"_index":260,"title":{},"body":{"changelog.html":{}}}],["1.0.11",{"_index":258,"title":{},"body":{"changelog.html":{}}}],["1.0.12",{"_index":254,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":269,"title":{},"body":{"changelog.html":{}}}],["1.0.3",{"_index":268,"title":{},"body":{"changelog.html":{}}}],["1.0.4",{"_index":267,"title":{},"body":{"changelog.html":{}}}],["1.0.5",{"_index":266,"title":{},"body":{"changelog.html":{}}}],["1.0.8",{"_index":265,"title":{},"body":{"changelog.html":{}}}],["1.0.9",{"_index":263,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":249,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":246,"title":{},"body":{"changelog.html":{}}}],["1.2.1",{"_index":241,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":279,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":141,"title":{},"body":{"changelog.html":{}}}],["100",{"_index":278,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":242,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":142,"title":{},"body":{"changelog.html":{}}}],["13/13",{"_index":285,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":171,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":155,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":193,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":264,"title":{},"body":{"changelog.html":{}}}],["1bd3dba",{"_index":172,"title":{},"body":{"changelog.html":{}}}],["2.0.0",{"_index":226,"title":{},"body":{"changelog.html":{}}}],["2.0.1",{"_index":225,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":221,"title":{},"body":{"changelog.html":{}}}],["2.1.1",{"_index":212,"title":{},"body":{"changelog.html":{}}}],["2.1.2",{"_index":200,"title":{},"body":{"changelog.html":{}}}],["2.1.4",{"_index":197,"title":{},"body":{"changelog.html":{}}}],["2.1.5",{"_index":186,"title":{},"body":{"changelog.html":{}}}],["2.2.0",{"_index":177,"title":{},"body":{"changelog.html":{}}}],["2.2.1",{"_index":176,"title":{},"body":{"changelog.html":{}}}],["2.2.2",{"_index":175,"title":{},"body":{"changelog.html":{}}}],["2.2.3",{"_index":174,"title":{},"body":{"changelog.html":{}}}],["20",{"_index":255,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":250,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2022",{"_index":201,"title":{},"body":{"changelog.html":{}}}],["2023",{"_index":187,"title":{},"body":{"changelog.html":{}}}],["2024",{"_index":140,"title":{},"body":{"changelog.html":{}}}],["2048",{"_index":57,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["21",{"_index":162,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":228,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":199,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":149,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":189,"title":{},"body":{"changelog.html":{}}}],["3.0.0",{"_index":173,"title":{},"body":{"changelog.html":{}}}],["3.0.1",{"_index":169,"title":{},"body":{"changelog.html":{}}}],["3.1.0",{"_index":160,"title":{},"body":{"changelog.html":{}}}],["3.1.1",{"_index":153,"title":{},"body":{"changelog.html":{}}}],["3.2.0",{"_index":150,"title":{},"body":{"changelog.html":{}}}],["3.3.0",{"_index":139,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["36",{"_index":167,"title":{},"body":{"changelog.html":{}}}],["373d6c12",{"_index":240,"title":{},"body":{"changelog.html":{}}}],["3f6b0b4e",{"_index":245,"title":{},"body":{"changelog.html":{}}}],["4737bae",{"_index":152,"title":{},"body":{"changelog.html":{}}}],["4e470c6f",{"_index":239,"title":{},"body":{"changelog.html":{}}}],["5f3c40de",{"_index":272,"title":{},"body":{"changelog.html":{}}}],["6f1fa5e3",{"_index":248,"title":{},"body":{"changelog.html":{}}}],["74c51131",{"_index":253,"title":{},"body":{"changelog.html":{}}}],["79b17826",{"_index":224,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":195,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["8').tostring('base64",{"_index":592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["846687b4",{"_index":243,"title":{},"body":{"changelog.html":{}}}],["8a08c44e",{"_index":259,"title":{},"body":{"changelog.html":{}}}],["8b49642f",{"_index":206,"title":{},"body":{"changelog.html":{}}}],["a828288",{"_index":168,"title":{},"body":{"changelog.html":{}}}],["abide",{"_index":470,"title":{},"body":{"index.html":{}}}],["above",{"_index":520,"title":{},"body":{"license.html":{}}}],["action",{"_index":545,"title":{},"body":{"license.html":{}}}],["add",{"_index":145,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["agree",{"_index":469,"title":{},"body":{"index.html":{}}}],["algorithm",{"_index":558,"title":{},"body":{"properties.html":{}}}],["aliases",{"_index":576,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allows",{"_index":328,"title":{},"body":{"index.html":{}}}],["although",{"_index":416,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":511,"title":{},"body":{"license.html":{}}}],["application",{"_index":339,"title":{},"body":{"index.html":{}}}],["args",{"_index":77,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["arising",{"_index":548,"title":{},"body":{"license.html":{}}}],["associated",{"_index":499,"title":{},"body":{"license.html":{}}}],["authentication",{"_index":337,"title":{},"body":{"index.html":{}}}],["authenticity",{"_index":425,"title":{},"body":{"index.html":{}}}],["author",{"_index":570,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":538,"title":{},"body":{"license.html":{}}}],["available",{"_index":311,"title":{},"body":{"miscellaneous/functions.html":{}}}],["b",{"_index":447,"title":{},"body":{"index.html":{}}}],["b435e3ba",{"_index":257,"title":{},"body":{"changelog.html":{}}}],["back",{"_index":403,"title":{},"body":{"index.html":{}}}],["base64",{"_index":86,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["base64').tostring('utf",{"_index":587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base64string",{"_index":118,"title":{},"body":{"classes/NodeRSA.html":{}}}],["before",{"_index":382,"title":{},"body":{"index.html":{}}}],["binary",{"_index":407,"title":{},"body":{"index.html":{}}}],["bits",{"_index":52,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":19,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{}}}],["branch",{"_index":443,"title":{},"body":{"index.html":{}}}],["buffer",{"_index":17,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["buffer.from('this",{"_index":406,"title":{},"body":{"index.html":{}}}],["buffer.from(decryptedbase64",{"_index":123,"title":{},"body":{"classes/NodeRSA.html":{}}}],["buffer.from(str",{"_index":586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.tostring(this.keybase64",{"_index":119,"title":{},"body":{"classes/NodeRSA.html":{}}}],["bug",{"_index":156,"title":{},"body":{"changelog.html":{}}}],["bugfix",{"_index":445,"title":{},"body":{"index.html":{}}}],["bugs",{"_index":565,"title":{},"body":{"properties.html":{}}}],["c",{"_index":487,"title":{},"body":{"license.html":{}}}],["cases",{"_index":374,"title":{},"body":{"index.html":{}}}],["catch",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ce1f031",{"_index":159,"title":{},"body":{"changelog.html":{}}}],["cebb2758",{"_index":252,"title":{},"body":{"changelog.html":{}}}],["change",{"_index":178,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":129,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":131,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["channels",{"_index":380,"title":{},"body":{"index.html":{}}}],["charge",{"_index":494,"title":{},"body":{"license.html":{}}}],["checkout",{"_index":446,"title":{},"body":{"index.html":{}}}],["chores",{"_index":190,"title":{},"body":{"changelog.html":{}}}],["claim",{"_index":541,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/NodeRSA.html":{}},"body":{"classes/NodeRSA.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/NodeRSA.html":{}}}],["clear",{"_index":450,"title":{},"body":{"index.html":{}}}],["clone",{"_index":436,"title":{},"body":{"index.html":{}}}],["closes",{"_index":148,"title":{},"body":{"changelog.html":{}}}],["code",{"_index":463,"title":{},"body":{"index.html":{}}}],["codebase",{"_index":449,"title":{},"body":{"index.html":{}}}],["commit",{"_index":137,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["conditions",{"_index":519,"title":{},"body":{"license.html":{}}}],["conduct",{"_index":464,"title":{},"body":{"index.html":{}}}],["conflicts",{"_index":219,"title":{},"body":{"changelog.html":{}}}],["connection",{"_index":550,"title":{},"body":{"license.html":{}}}],["console.log('decrypted",{"_index":365,"title":{},"body":{"index.html":{}}}],["console.log('encrypted",{"_index":361,"title":{},"body":{"index.html":{}}}],["console.log('private",{"_index":355,"title":{},"body":{"index.html":{}}}],["console.log('public",{"_index":354,"title":{},"body":{"index.html":{}}}],["const",{"_index":113,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["constructor",{"_index":35,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["constructor(publickey",{"_index":36,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["constructs",{"_index":40,"title":{},"body":{"classes/NodeRSA.html":{}}}],["contain",{"_index":307,"title":{},"body":{"miscellaneous/functions.html":{}}}],["containing",{"_index":316,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["contract",{"_index":546,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":430,"title":{},"body":{"index.html":{}}}],["contributing",{"_index":483,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":426,"title":{},"body":{"index.html":{}}}],["contributions",{"_index":428,"title":{},"body":{"index.html":{}}}],["contributor",{"_index":467,"title":{},"body":{"index.html":{}}}],["converted",{"_index":306,"title":{},"body":{"miscellaneous/functions.html":{}}}],["convertkettobase64",{"_index":100,"title":{},"body":{"classes/NodeRSA.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["convertkettobase64(key",{"_index":297,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["convertkettobase64(privatekey",{"_index":116,"title":{},"body":{"classes/NodeRSA.html":{}}}],["convertkettobase64(publickey",{"_index":115,"title":{},"body":{"classes/NodeRSA.html":{}}}],["converts",{"_index":298,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["copies",{"_index":513,"title":{},"body":{"license.html":{}}}],["copy",{"_index":497,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":486,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":274,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covered",{"_index":418,"title":{},"body":{"index.html":{}}}],["create",{"_index":184,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["createprivateandpublickeys",{"_index":28,"title":{},"body":{"classes/NodeRSA.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createprivateandpublickeys(moduluslength",{"_index":62,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["creates",{"_index":64,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/typealiases.html":{}}}],["creating",{"_index":251,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["credentials",{"_index":393,"title":{},"body":{"index.html":{}}}],["crypto",{"_index":560,"title":{},"body":{"properties.html":{}}}],["crypto.generatekeypairsync",{"_index":310,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cryptographic",{"_index":341,"title":{},"body":{"index.html":{}}}],["current",{"_index":419,"title":{},"body":{"index.html":{}}}],["d3cba4c0",{"_index":238,"title":{},"body":{"changelog.html":{}}}],["d47af0f5",{"_index":234,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":542,"title":{},"body":{"license.html":{}}}],["data",{"_index":335,"title":{},"body":{"index.html":{}}}],["data'digital",{"_index":414,"title":{},"body":{"index.html":{}}}],["dbb771af",{"_index":222,"title":{},"body":{"changelog.html":{}}}],["de0f8024",{"_index":230,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":501,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":551,"title":{},"body":{"license.html":{}}}],["decode",{"_index":236,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["decodes",{"_index":319,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["decrypt",{"_index":29,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["decrypt(args",{"_index":73,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["decryptbufferwithrsaprivatekey",{"_index":30,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["decryptbufferwithrsaprivatekey(encryptedtext",{"_index":83,"title":{},"body":{"classes/NodeRSA.html":{}}}],["decrypted",{"_index":81,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["decryptedbase64",{"_index":121,"title":{},"body":{"classes/NodeRSA.html":{}}}],["decryptedbuffer",{"_index":410,"title":{},"body":{"index.html":{}}}],["decryptedbuffer.tostring",{"_index":412,"title":{},"body":{"index.html":{}}}],["decryptedcredentials",{"_index":400,"title":{},"body":{"index.html":{}}}],["decryptedcredentials);buffer",{"_index":402,"title":{},"body":{"index.html":{}}}],["decryptedmessage",{"_index":389,"title":{},"body":{"index.html":{}}}],["decryptedmessage);authentication",{"_index":392,"title":{},"body":{"index.html":{}}}],["decryptedstring",{"_index":363,"title":{},"body":{"index.html":{}}}],["decryptedstring);api",{"_index":369,"title":{},"body":{"index.html":{}}}],["decryptedstring);encrypting",{"_index":366,"title":{},"body":{"index.html":{}}}],["decrypting",{"_index":332,"title":{},"body":{"index.html":{}}}],["decryption",{"_index":10,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["decrypts",{"_index":76,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["decryptstringwithrsaprivatekey",{"_index":31,"title":{},"body":{"classes/NodeRSA.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["decryptstringwithrsaprivatekey(args",{"_index":87,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["default",{"_index":67,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":56,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{}}}],["defined",{"_index":38,"title":{},"body":{"classes/NodeRSA.html":{}}}],["deprectate",{"_index":181,"title":{},"body":{"changelog.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["descriptive",{"_index":451,"title":{},"body":{"index.html":{}}}],["descrpt",{"_index":166,"title":{},"body":{"changelog.html":{}}}],["detailed",{"_index":461,"title":{},"body":{"index.html":{}}}],["details",{"_index":477,"title":{},"body":{"index.html":{}}}],["digital",{"_index":422,"title":{},"body":{"index.html":{}}}],["directly",{"_index":417,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":509,"title":{},"body":{"license.html":{}}}],["docs",{"_index":158,"title":{},"body":{"changelog.html":{}}}],["documentation",{"_index":210,"title":{},"body":{"changelog.html":{},"coverage.html":{},"license.html":{}}}],["documented",{"_index":133,"title":{},"body":{"changelog.html":{}}}],["e",{"_index":571,"title":{},"body":{"properties.html":{}}}],["e29f1805",{"_index":262,"title":{},"body":{"changelog.html":{}}}],["e4e3f254",{"_index":229,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":303,"title":{},"body":{"miscellaneous/functions.html":{}}}],["easy",{"_index":326,"title":{},"body":{"index.html":{}}}],["empty",{"_index":314,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encode",{"_index":237,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["encoded",{"_index":299,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["encodes",{"_index":305,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["encoding",{"_index":53,"title":{},"body":{"classes/NodeRSA.html":{}}}],["encounter",{"_index":474,"title":{},"body":{"index.html":{}}}],["encrypt",{"_index":32,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["encrypt(args",{"_index":90,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["encryptbufferwithrsapublickey",{"_index":33,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["encryptbufferwithrsapublickey(buffer",{"_index":94,"title":{},"body":{"classes/NodeRSA.html":{}}}],["encrypted",{"_index":79,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["encryptedbuffer",{"_index":408,"title":{},"body":{"index.html":{}}}],["encryptedcredentials",{"_index":396,"title":{},"body":{"index.html":{}}}],["encryptedmessage",{"_index":386,"title":{},"body":{"index.html":{}}}],["encryptedstring",{"_index":359,"title":{},"body":{"index.html":{}}}],["encryptedstring);decrypting",{"_index":362,"title":{},"body":{"index.html":{}}}],["encryptedtext",{"_index":85,"title":{},"body":{"classes/NodeRSA.html":{}}}],["encrypting",{"_index":331,"title":{},"body":{"index.html":{}}}],["encryption",{"_index":9,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{},"properties.html":{}}}],["encryption/decryption",{"_index":18,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["encrypts",{"_index":93,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["encryptstringwithrsapublickey",{"_index":34,"title":{},"body":{"classes/NodeRSA.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["encryptstringwithrsapublickey(args",{"_index":96,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["enctypt",{"_index":165,"title":{},"body":{"changelog.html":{}}}],["ensure",{"_index":423,"title":{},"body":{"index.html":{}}}],["environment",{"_index":478,"title":{},"body":{"index.html":{}}}],["error",{"_index":589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error('failed",{"_index":591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["etc",{"_index":481,"title":{},"body":{"index.html":{}}}],["event",{"_index":537,"title":{},"body":{"license.html":{}}}],["example",{"_index":344,"title":{},"body":{"index.html":{}}}],["export",{"_index":124,"title":{},"body":{"classes/NodeRSA.html":{}}}],["express",{"_index":528,"title":{},"body":{"license.html":{}}}],["ezzat",{"_index":489,"title":{},"body":{"license.html":{}}}],["ezzat.vercel.app",{"_index":574,"title":{},"body":{"properties.html":{}}}],["f5c1c45e",{"_index":217,"title":{},"body":{"changelog.html":{}}}],["fahmy",{"_index":572,"title":{},"body":{"properties.html":{}}}],["feature",{"_index":444,"title":{},"body":{"index.html":{}}}],["feature/your",{"_index":448,"title":{},"body":{"index.html":{}}}],["features",{"_index":143,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"coverage.html":{}}}],["files",{"_index":500,"title":{},"body":{"license.html":{}}}],["first",{"_index":318,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fitness",{"_index":533,"title":{},"body":{"license.html":{}}}],["fix",{"_index":453,"title":{},"body":{"index.html":{}}}],["fixes",{"_index":157,"title":{},"body":{"changelog.html":{}}}],["flow",{"_index":216,"title":{},"body":{"changelog.html":{}}}],["follow",{"_index":432,"title":{},"body":{"index.html":{}}}],["following",{"_index":518,"title":{},"body":{"license.html":{}}}],["fork",{"_index":434,"title":{},"body":{"index.html":{}}}],["forked",{"_index":437,"title":{},"body":{"index.html":{}}}],["format",{"_index":54,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["free",{"_index":493,"title":{},"body":{"license.html":{}}}],["function",{"_index":183,"title":{},"body":{"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":180,"title":{"miscellaneous/functions.html":{}},"body":{"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["functions/convertkettobase64",{"_index":101,"title":{},"body":{"classes/NodeRSA.html":{}}}],["functions/createprivateandpublickeys",{"_index":102,"title":{},"body":{"classes/NodeRSA.html":{}}}],["functions/decrypt",{"_index":103,"title":{},"body":{"classes/NodeRSA.html":{}}}],["functions/decryptstringwithrsaprivatekey",{"_index":104,"title":{},"body":{"classes/NodeRSA.html":{}}}],["functions/encrypt",{"_index":105,"title":{},"body":{"classes/NodeRSA.html":{}}}],["functions/encryptstringwithrsapublickey",{"_index":106,"title":{},"body":{"classes/NodeRSA.html":{}}}],["furnished",{"_index":516,"title":{},"body":{"license.html":{}}}],["generate",{"_index":352,"title":{},"body":{"index.html":{}}}],["generated",{"_index":72,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{}}}],["generates",{"_index":308,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["generating",{"_index":329,"title":{},"body":{"index.html":{}}}],["getting",{"_index":127,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["git",{"_index":440,"title":{},"body":{"index.html":{}}}],["git+https://github.com/miladezzat/encrypt",{"_index":569,"title":{},"body":{"properties.html":{}}}],["git@github.com:miladezzat/encrypt",{"_index":441,"title":{},"body":{"index.html":{}}}],["github",{"_index":214,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["given",{"_index":66,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["granted",{"_index":492,"title":{},"body":{"license.html":{}}}],["greater",{"_index":192,"title":{},"body":{"changelog.html":{}}}],["guidelines",{"_index":138,"title":{},"body":{"changelog.html":{}}}],["hello",{"_index":357,"title":{},"body":{"index.html":{}}}],["helper",{"_index":235,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["hereby",{"_index":491,"title":{},"body":{"license.html":{}}}],["holders",{"_index":539,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":563,"title":{},"body":{"properties.html":{}}}],["https://encrypt",{"_index":564,"title":{},"body":{"properties.html":{}}}],["https://github.com/miladezzat/encrypt",{"_index":566,"title":{},"body":{"properties.html":{}}}],["https://milad",{"_index":573,"title":{},"body":{"properties.html":{}}}],["ideal",{"_index":333,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":275,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":208,"title":{},"body":{"changelog.html":{}}}],["implementation",{"_index":420,"title":{},"body":{"index.html":{}}}],["implied",{"_index":529,"title":{},"body":{"license.html":{}}}],["import",{"_index":99,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["importing",{"_index":348,"title":{},"body":{"index.html":{}}}],["include",{"_index":460,"title":{},"body":{"index.html":{}}}],["included",{"_index":523,"title":{},"body":{"license.html":{}}}],["including",{"_index":78,"title":{},"body":{"classes/NodeRSA.html":{},"license.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index.ts",{"_index":144,"title":{},"body":{"changelog.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/NodeRSA.html":{}}}],["information",{"_index":394,"title":{},"body":{"index.html":{}}}],["input",{"_index":322,"title":{},"body":{"miscellaneous/functions.html":{}}}],["insecure",{"_index":379,"title":{},"body":{"index.html":{}}}],["install",{"_index":345,"title":{},"body":{"index.html":{}}}],["installation",{"_index":343,"title":{},"body":{"index.html":{}}}],["instance",{"_index":42,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["instance's",{"_index":370,"title":{},"body":{"index.html":{}}}],["integrity",{"_index":424,"title":{},"body":{"index.html":{}}}],["isc",{"_index":568,"title":{},"body":{"properties.html":{}}}],["issue",{"_index":164,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["issues",{"_index":473,"title":{},"body":{"index.html":{}}}],["javascript",{"_index":562,"title":{},"body":{"properties.html":{}}}],["js",{"_index":561,"title":{},"body":{"properties.html":{}}}],["key",{"_index":49,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["keybase64",{"_index":24,"title":{},"body":{"classes/NodeRSA.html":{}}}],["keys",{"_index":14,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["keywords",{"_index":256,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["kind",{"_index":527,"title":{},"body":{"license.html":{}}}],["leading",{"_index":301,"title":{},"body":{"miscellaneous/functions.html":{}}}],["length",{"_index":50,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["liability",{"_index":543,"title":{},"body":{"license.html":{}}}],["liable",{"_index":540,"title":{},"body":{"license.html":{}}}],["library",{"_index":325,"title":{},"body":{"index.html":{}}}],["license",{"_index":484,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["limitation",{"_index":504,"title":{},"body":{"license.html":{}}}],["limited",{"_index":530,"title":{},"body":{"license.html":{}}}],["line",{"_index":304,"title":{},"body":{"miscellaneous/functions.html":{}}}],["literal",{"_index":581,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["little",{"_index":556,"title":{},"body":{"properties.html":{}}}],["local",{"_index":438,"title":{},"body":{"index.html":{}}}],["log",{"_index":413,"title":{},"body":{"index.html":{}}}],["m",{"_index":452,"title":{},"body":{"index.html":{}}}],["machine",{"_index":439,"title":{},"body":{"index.html":{}}}],["main",{"_index":179,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":231,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["matching",{"_index":126,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":532,"title":{},"body":{"license.html":{}}}],["merge",{"_index":507,"title":{},"body":{"license.html":{}}}],["message",{"_index":391,"title":{},"body":{"index.html":{}}}],["methods",{"_index":11,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"index.html":{}}}],["milad",{"_index":488,"title":{},"body":{"license.html":{},"properties.html":{}}}],["miladezzat/rsa",{"_index":271,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":290,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":485,"title":{},"body":{"license.html":{}}}],["modify",{"_index":506,"title":{},"body":{"license.html":{}}}],["module",{"_index":557,"title":{},"body":{"properties.html":{}}}],["modules",{"_index":552,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["modulus",{"_index":51,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["moduluslength",{"_index":25,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["moduluslength);generating",{"_index":351,"title":{},"body":{"index.html":{}}}],["moduluslength=2048",{"_index":109,"title":{},"body":{"classes/NodeRSA.html":{}}}],["moduluslength=this.moduluslength",{"_index":117,"title":{},"body":{"classes/NodeRSA.html":{}}}],["name",{"_index":45,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["new",{"_index":41,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["node",{"_index":191,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["node.js",{"_index":480,"title":{},"body":{"index.html":{}}}],["nodersa",{"_index":1,"title":{"classes/NodeRSA.html":{}},"body":{"classes/NodeRSA.html":{},"coverage.html":{},"index.html":{}}}],["nodersa(publickey",{"_index":350,"title":{},"body":{"index.html":{}}}],["nodersa.createprivateandpublickeys",{"_index":405,"title":{},"body":{"index.html":{}}}],["nodersa.createprivateandpublickeys(moduluslength",{"_index":353,"title":{},"body":{"index.html":{}}}],["nodersa.decrypt",{"_index":368,"title":{},"body":{"index.html":{}}}],["nodersa.decryptbufferwithrsaprivatekey(encryptedbuffer",{"_index":411,"title":{},"body":{"index.html":{}}}],["nodersa.decryptstringwithrsaprivatekey",{"_index":364,"title":{},"body":{"index.html":{}}}],["nodersa.encrypt",{"_index":367,"title":{},"body":{"index.html":{}}}],["nodersa.encryptbufferwithrsapublickey(buffer",{"_index":409,"title":{},"body":{"index.html":{}}}],["nodersa.encryptstringwithrsapublickey",{"_index":360,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":536,"title":{},"body":{"license.html":{}}}],["notable",{"_index":130,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":465,"title":{},"body":{"index.html":{}}}],["notice",{"_index":521,"title":{},"body":{"license.html":{}}}],["npm",{"_index":194,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["number",{"_index":37,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["object",{"_index":315,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["obtaining",{"_index":496,"title":{},"body":{"license.html":{}}}],["old",{"_index":182,"title":{},"body":{"changelog.html":{}}}],["optional",{"_index":47,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["optionally",{"_index":371,"title":{},"body":{"index.html":{}}}],["origin",{"_index":455,"title":{},"body":{"index.html":{}}}],["original",{"_index":458,"title":{},"body":{"index.html":{}}}],["os",{"_index":479,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":313,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["out",{"_index":549,"title":{},"body":{"license.html":{}}}],["over",{"_index":378,"title":{},"body":{"index.html":{}}}],["overview",{"_index":553,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":555,"title":{"properties.html":{}},"body":{}}],["pair",{"_index":65,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["pairs",{"_index":330,"title":{},"body":{"index.html":{}}}],["param",{"_index":108,"title":{},"body":{"classes/NodeRSA.html":{}}}],["parameters",{"_index":43,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["parametersofdecrypt",{"_index":88,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["parametersofdecryptpublic",{"_index":74,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["parametersofencrypt",{"_index":97,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["parametersofencryptprivate",{"_index":91,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["participating",{"_index":468,"title":{},"body":{"index.html":{}}}],["particular",{"_index":534,"title":{},"body":{"license.html":{}}}],["pem",{"_index":317,"title":{},"body":{"miscellaneous/functions.html":{}}}],["permission",{"_index":490,"title":{},"body":{"license.html":{}}}],["permit",{"_index":514,"title":{},"body":{"license.html":{}}}],["person",{"_index":495,"title":{},"body":{"license.html":{}}}],["persons",{"_index":515,"title":{},"body":{"license.html":{}}}],["plain",{"_index":82,"title":{},"body":{"classes/NodeRSA.html":{}}}],["please",{"_index":431,"title":{},"body":{"index.html":{}}}],["portions",{"_index":525,"title":{},"body":{"license.html":{}}}],["prebuilsh",{"_index":204,"title":{},"body":{"changelog.html":{}}}],["private",{"_index":21,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["privatekey",{"_index":26,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["privatekey);encrypting",{"_index":356,"title":{},"body":{"index.html":{}}}],["problem",{"_index":462,"title":{},"body":{"index.html":{}}}],["project",{"_index":132,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["properties",{"_index":23,"title":{"properties.html":{}},"body":{"classes/NodeRSA.html":{},"properties.html":{}}}],["provided",{"_index":312,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["provides",{"_index":8,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["public",{"_index":20,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["publickey",{"_index":27,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["publish",{"_index":508,"title":{},"body":{"license.html":{}}}],["pull",{"_index":456,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":535,"title":{},"body":{"license.html":{}}}],["push",{"_index":454,"title":{},"body":{"index.html":{}}}],["readme",{"_index":261,"title":{},"body":{"changelog.html":{}}}],["recipient",{"_index":384,"title":{},"body":{"index.html":{}}}],["recipient's",{"_index":381,"title":{},"body":{"index.html":{}}}],["recipientprivatekey",{"_index":390,"title":{},"body":{"index.html":{}}}],["recipientpublickey",{"_index":387,"title":{},"body":{"index.html":{}}}],["released",{"_index":466,"title":{},"body":{"index.html":{}}}],["removes",{"_index":300,"title":{},"body":{"miscellaneous/functions.html":{}}}],["report",{"_index":475,"title":{},"body":{"index.html":{}}}],["reporting",{"_index":472,"title":{},"body":{"index.html":{}}}],["repository",{"_index":435,"title":{},"body":{"index.html":{},"properties.html":{}}}],["representing",{"_index":579,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["request",{"_index":457,"title":{},"body":{"index.html":{}}}],["required",{"_index":580,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["requiring",{"_index":340,"title":{},"body":{"index.html":{}}}],["resolve",{"_index":163,"title":{},"body":{"changelog.html":{}}}],["restriction",{"_index":503,"title":{},"body":{"license.html":{}}}],["result",{"_index":323,"title":{},"body":{"miscellaneous/functions.html":{}}}],["results",{"_index":125,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":114,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["returncreatekeys",{"_index":71,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["returned",{"_index":324,"title":{},"body":{"miscellaneous/functions.html":{}}}],["returns",{"_index":70,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["rights",{"_index":505,"title":{},"body":{"license.html":{}}}],["rsa",{"_index":13,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["rsa';creating",{"_index":349,"title":{},"body":{"index.html":{}}}],["rsa.git",{"_index":442,"title":{},"body":{"index.html":{},"properties.html":{}}}],["rsa.js.org",{"_index":244,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["rsa/issues",{"_index":567,"title":{},"body":{"properties.html":{}}}],["rsausage",{"_index":347,"title":{},"body":{"index.html":{}}}],["script",{"_index":205,"title":{},"body":{"changelog.html":{}}}],["secure",{"_index":334,"title":{},"body":{"index.html":{}}}],["securely",{"_index":375,"title":{},"body":{"index.html":{}}}],["security",{"_index":342,"title":{},"body":{"index.html":{}}}],["see",{"_index":134,"title":{},"body":{"changelog.html":{}}}],["sell",{"_index":512,"title":{},"body":{"license.html":{}}}],["send",{"_index":388,"title":{},"body":{"index.html":{}}}],["sender",{"_index":385,"title":{},"body":{"index.html":{}}}],["sending",{"_index":383,"title":{},"body":{"index.html":{}}}],["sensitive",{"_index":377,"title":{},"body":{"index.html":{}}}],["server",{"_index":399,"title":{},"body":{"index.html":{}}}],["serverprivatekey",{"_index":401,"title":{},"body":{"index.html":{}}}],["serverpublickey",{"_index":398,"title":{},"body":{"index.html":{}}}],["set",{"_index":247,"title":{},"body":{"changelog.html":{}}}],["shall",{"_index":522,"title":{},"body":{"license.html":{}}}],["signatures",{"_index":415,"title":{},"body":{"index.html":{}}}],["software",{"_index":498,"title":{},"body":{"license.html":{}}}],["solve",{"_index":213,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["solvw",{"_index":218,"title":{},"body":{"changelog.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/NodeRSA.html":{}}}],["spaces",{"_index":302,"title":{},"body":{"miscellaneous/functions.html":{}}}],["specified",{"_index":309,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../convertkettobase64.ts",{"_index":291,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../createprivateandpublickeys.ts",{"_index":292,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../decrypt.ts",{"_index":293,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../decryptstringwithrsaprivatekey.ts",{"_index":294,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../encrypt.ts",{"_index":295,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../encryptstringwithrsapublickey.ts",{"_index":296,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../helpers.ts",{"_index":583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../types.ts",{"_index":577,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/functions/convertkettobase64.ts",{"_index":277,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/functions/createprivateandpublickeys.ts",{"_index":280,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/functions/decrypt.ts",{"_index":281,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/functions/decryptstringwithrsaprivatekey.ts",{"_index":282,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/functions/encrypt.ts",{"_index":283,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/functions/encryptstringwithrsapublickey.ts",{"_index":284,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/index.ts",{"_index":6,"title":{},"body":{"classes/NodeRSA.html":{},"coverage.html":{}}}],["src/index.ts:101",{"_index":75,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/index.ts:112",{"_index":63,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/index.ts:123",{"_index":95,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/index.ts:135",{"_index":84,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/index.ts:25",{"_index":61,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/index.ts:32",{"_index":59,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/index.ts:39",{"_index":55,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/index.ts:46",{"_index":39,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/index.ts:68",{"_index":98,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/index.ts:79",{"_index":89,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/index.ts:90",{"_index":92,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/utils/helpers.ts",{"_index":286,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/types.ts",{"_index":578,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["standard",{"_index":135,"title":{},"body":{"changelog.html":{}}}],["started",{"_index":128,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":276,"title":{},"body":{"coverage.html":{}}}],["steps",{"_index":433,"title":{},"body":{"index.html":{}}}],["str",{"_index":584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":16,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":233,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["subject",{"_index":517,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":510,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":524,"title":{},"body":{"license.html":{}}}],["support",{"_index":146,"title":{},"body":{"changelog.html":{}}}],["supports",{"_index":15,"title":{},"body":{"classes/NodeRSA.html":{}}}],["sure",{"_index":459,"title":{},"body":{"index.html":{}}}],["systems",{"_index":338,"title":{},"body":{"index.html":{}}}],["table",{"_index":289,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":288,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":232,"title":{},"body":{"changelog.html":{}}}],["terms",{"_index":471,"title":{},"body":{"index.html":{}}}],["tests",{"_index":223,"title":{},"body":{"changelog.html":{}}}],["text",{"_index":80,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["thank",{"_index":482,"title":{},"body":{"index.html":{}}}],["this.decryptstringwithrsaprivatekey",{"_index":122,"title":{},"body":{"classes/NodeRSA.html":{}}}],["this.encryptstringwithrsapublickey",{"_index":120,"title":{},"body":{"classes/NodeRSA.html":{}}}],["this.keybase64",{"_index":112,"title":{},"body":{"classes/NodeRSA.html":{}}}],["this.moduluslength",{"_index":69,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["this.privatekey",{"_index":111,"title":{},"body":{"classes/NodeRSA.html":{}}}],["this.publickey",{"_index":110,"title":{},"body":{"classes/NodeRSA.html":{}}}],["throw",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tort",{"_index":547,"title":{},"body":{"license.html":{}}}],["tracker",{"_index":476,"title":{},"body":{"index.html":{}}}],["transmission",{"_index":336,"title":{},"body":{"index.html":{}}}],["transmit",{"_index":376,"title":{},"body":{"index.html":{}}}],["try",{"_index":585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["type",{"_index":46,"title":{},"body":{"classes/NodeRSA.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":575,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":372,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":559,"title":{},"body":{"properties.html":{}}}],["undefined",{"_index":58,"title":{},"body":{"classes/NodeRSA.html":{}}}],["update",{"_index":207,"title":{},"body":{"changelog.html":{}}}],["usage",{"_index":404,"title":{},"body":{"index.html":{}}}],["use",{"_index":327,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["used",{"_index":60,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["user",{"_index":395,"title":{},"body":{"index.html":{}}}],["username:password",{"_index":397,"title":{},"body":{"index.html":{}}}],["uses",{"_index":321,"title":{},"body":{"miscellaneous/functions.html":{}}}],["using",{"_index":12,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["utf",{"_index":320,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["utilities",{"_index":373,"title":{},"body":{"index.html":{}}}],["utils/types",{"_index":107,"title":{},"body":{"classes/NodeRSA.html":{}}}],["value",{"_index":68,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":287,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":582,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifying",{"_index":421,"title":{},"body":{"index.html":{}}}],["version",{"_index":136,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["warranties",{"_index":531,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":526,"title":{},"body":{"license.html":{}}}],["welcome",{"_index":427,"title":{},"body":{"index.html":{}}}],["whether",{"_index":544,"title":{},"body":{"license.html":{}}}],["without",{"_index":502,"title":{},"body":{"license.html":{}}}],["work",{"_index":215,"title":{},"body":{"changelog.html":{}}}],["world",{"_index":358,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":346,"title":{},"body":{"index.html":{}}}],["yes",{"_index":48,"title":{},"body":{"classes/NodeRSA.html":{}}}],["you'd",{"_index":429,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/NodeRSA.html":{"url":"classes/NodeRSA.html","title":"class - NodeRSA","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NodeRSA\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/index.ts\n        \n\n\n            \n                Description\n            \n            \n                NodeRSA class provides encryption and decryption methods using RSA keys.\nIt supports string and buffer encryption/decryption with both public and private keys.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                keyBase64\n                            \n                            \n                                    Private\n                                modulusLength\n                            \n                            \n                                    Private\n                                privateKey\n                            \n                            \n                                    Private\n                                publicKey\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createPrivateAndPublicKeys\n                            \n                            \n                                    Public\n                                decrypt\n                            \n                            \n                                    Public\n                                decryptBufferWithRsaPrivateKey\n                            \n                            \n                                    Public\n                                decryptStringWithRsaPrivateKey\n                            \n                            \n                                    Public\n                                encrypt\n                            \n                            \n                                    Public\n                                encryptBufferWithRsaPublicKey\n                            \n                            \n                                    Public\n                                encryptStringWithRsaPublicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(publicKey?: string, privateKey?: string, modulusLength?: number)\n                    \n                \n                        \n                            \n                                Defined in src/index.ts:46\n                            \n                        \n\n                \n                    \n                            Constructs a new instance of the NodeRSA class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        publicKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nOptional public key for encryption.\n\n\n                                                        \n                                                \n                                                \n                                                        privateKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nOptional private key for decryption.\n\n\n                                                        \n                                                \n                                                \n                                                        modulusLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nLength of the RSA modulus in bits.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        keyBase64\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/index.ts:46\n                        \n                    \n\n            \n                \n                    Encoding format for the keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        modulusLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/index.ts:39\n                        \n                    \n\n            \n                \n                    Length of the RSA modulus, defaults to 2048 bits.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/index.ts:32\n                        \n                    \n\n            \n                \n                    Private key used for decryption.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/index.ts:25\n                        \n                    \n\n            \n                \n                    Public key used for encryption.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createPrivateAndPublicKeys\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPrivateAndPublicKeys(modulusLength: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/index.ts:112\n                        \n                    \n\n\n            \n                \n                        Creates a pair of RSA private and public keys with the given modulus length.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                modulusLength\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    this.modulusLength\n                                            \n\n                                            \n                                                    \nLength of the RSA modulus in bits.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         returnCreateKeys\n\n                        \n                            \n                                The generated RSA private and public keys.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        decrypt\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrypt(args: parametersOfDecryptPublic)\n                \n            \n\n\n                    \n                        \n                            Defined in src/index.ts:101\n                        \n                    \n\n\n            \n                \n                        Decrypts a string using the RSA public key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            parametersOfDecryptPublic\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nParameters for decryption, including the encrypted text and public key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Decrypted plain text string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        decryptBufferWithRsaPrivateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    decryptBufferWithRsaPrivateKey(encryptedText: string, privateKey?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/index.ts:135\n                        \n                    \n\n\n            \n                \n                        Decrypts a buffer using the RSA private key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                encryptedText\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe encrypted base64 string to decrypt.\n\n\n                                            \n                                        \n                                        \n                                                privateKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional private key for decryption.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Buffer\n\n                        \n                            \n                                Decrypted buffer.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        decryptStringWithRsaPrivateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    decryptStringWithRsaPrivateKey(args: parametersOfDecrypt)\n                \n            \n\n\n                    \n                        \n                            Defined in src/index.ts:79\n                        \n                    \n\n\n            \n                \n                        Decrypts a string using the RSA private key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            parametersOfDecrypt\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nParameters for decryption, including the encrypted text and private key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Decrypted plain text string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        encrypt\n                        \n                    \n                \n            \n            \n                \n                        \n                    encrypt(args: parametersOfEncryptPrivate)\n                \n            \n\n\n                    \n                        \n                            Defined in src/index.ts:90\n                        \n                    \n\n\n            \n                \n                        Encrypts a string using the RSA private key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            parametersOfEncryptPrivate\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nParameters for encryption, including the text and private key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Encrypted string in base64 format.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        encryptBufferWithRsaPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    encryptBufferWithRsaPublicKey(buffer: Buffer, publicKey?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/index.ts:123\n                        \n                    \n\n\n            \n                \n                        Encrypts a buffer using the RSA public key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                buffer\n                                            \n                                                        Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe buffer to encrypt.\n\n\n                                            \n                                        \n                                        \n                                                publicKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional public key for encryption.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Encrypted buffer as a base64 string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        encryptStringWithRsaPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    encryptStringWithRsaPublicKey(args: parametersOfEncrypt)\n                \n            \n\n\n                    \n                        \n                            Defined in src/index.ts:68\n                        \n                    \n\n\n            \n                \n                        Encrypts a string using the RSA public key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            parametersOfEncrypt\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nParameters for encryption, including the text and public key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Encrypted string in base64 format.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import convertKetToBase64 from './functions/convertKetToBase64';\nimport createPrivateAndPublicKeys from './functions/createPrivateAndPublicKeys';\nimport decrypt from './functions/decrypt';\nimport decryptStringWithRsaPrivateKey from './functions/decryptStringWithRsaPrivateKey';\nimport encrypt from './functions/encrypt';\nimport encryptStringWithRsaPublicKey from './functions/encryptStringWithRsaPublicKey';\nimport {\n  parametersOfDecrypt,\n  parametersOfDecryptPublic,\n  parametersOfEncrypt,\n  parametersOfEncryptPrivate,\n  returnCreateKeys,\n} from './utils/types';\n\n/**\n * NodeRSA class provides encryption and decryption methods using RSA keys.\n * It supports string and buffer encryption/decryption with both public and private keys.\n */\nclass NodeRSA {\n  /**\n     * @private\n     * @type {string | undefined}\n     * Public key used for encryption.\n     */\n  private publicKey: string | undefined;\n\n  /**\n     * @private\n     * @type {string | undefined}\n     * Private key used for decryption.\n     */\n  private privateKey: string | undefined;\n\n  /**\n     * @private\n     * @type {number}\n     * Length of the RSA modulus, defaults to 2048 bits.\n     */\n  private modulusLength: number;\n\n  /**\n     * @private\n     * @type {'base64'}\n     * Encoding format for the keys.\n     */\n  private keyBase64: 'base64';\n\n  /**\n     * Constructs a new instance of the NodeRSA class.\n     *\n     * @param {string} [publicKey] - Optional public key for encryption.\n     * @param {string} [privateKey] - Optional private key for decryption.\n     * @param {number} [modulusLength=2048] - Length of the RSA modulus in bits.\n     */\n  constructor(publicKey?: string, privateKey?: string, modulusLength?: number) {\n    this.publicKey = publicKey;\n    this.privateKey = privateKey;\n    this.modulusLength = modulusLength || 2048;\n    this.keyBase64 = 'base64';\n  }\n\n  /**\n     * Encrypts a string using the RSA public key.\n     *\n     * @param {parametersOfEncrypt} args - Parameters for encryption, including the text and public key.\n     * @returns {string} Encrypted string in base64 format.\n     */\n  public encryptStringWithRsaPublicKey(args: parametersOfEncrypt): string {\n    const { publicKey = this.publicKey } = args;\n    return encryptStringWithRsaPublicKey({ ...args, publicKey: convertKetToBase64(publicKey as string) });\n  }\n\n  /**\n     * Decrypts a string using the RSA private key.\n     *\n     * @param {parametersOfDecrypt} args - Parameters for decryption, including the encrypted text and private key.\n     * @returns {string} Decrypted plain text string.\n     */\n  public decryptStringWithRsaPrivateKey(args: parametersOfDecrypt): string {\n    const { privateKey = this.privateKey } = args;\n    return decryptStringWithRsaPrivateKey({ ...args, privateKey: convertKetToBase64(privateKey as string) });\n  }\n\n  /**\n     * Encrypts a string using the RSA private key.\n     *\n     * @param {parametersOfEncryptPrivate} args - Parameters for encryption, including the text and private key.\n     * @returns {string} Encrypted string in base64 format.\n     */\n  public encrypt(args: parametersOfEncryptPrivate): string {\n    const { privateKey = this.privateKey } = args;\n    return encrypt({ ...args, privateKey: convertKetToBase64(privateKey as string) });\n  }\n\n  /**\n     * Decrypts a string using the RSA public key.\n     *\n     * @param {parametersOfDecryptPublic} args - Parameters for decryption, including the encrypted text and public key.\n     * @returns {string} Decrypted plain text string.\n     */\n  public decrypt(args: parametersOfDecryptPublic): string {\n    const { publicKey = this.publicKey } = args;\n    return decrypt({ ...args, publicKey: convertKetToBase64(publicKey as string) });\n  }\n\n  /**\n     * Creates a pair of RSA private and public keys with the given modulus length.\n     *\n     * @param {number} [modulusLength=this.modulusLength] - Length of the RSA modulus in bits.\n     * @returns {returnCreateKeys} The generated RSA private and public keys.\n     */\n  public createPrivateAndPublicKeys(modulusLength: number = this.modulusLength): returnCreateKeys {\n    return createPrivateAndPublicKeys(modulusLength);\n  }\n\n  /**\n     * Encrypts a buffer using the RSA public key.\n     *\n     * @param {Buffer} buffer - The buffer to encrypt.\n     * @param {string} [publicKey] - Optional public key for encryption.\n     * @returns {string} Encrypted buffer as a base64 string.\n     */\n  public encryptBufferWithRsaPublicKey(buffer: Buffer, publicKey?: string): string {\n    const base64String = buffer.toString(this.keyBase64);\n    return this.encryptStringWithRsaPublicKey({ text: base64String, publicKey });\n  }\n\n  /**\n     * Decrypts a buffer using the RSA private key.\n     *\n     * @param {string} encryptedText - The encrypted base64 string to decrypt.\n     * @param {string} [privateKey] - Optional private key for decryption.\n     * @returns {Buffer} Decrypted buffer.\n     */\n  public decryptBufferWithRsaPrivateKey(encryptedText: string, privateKey?: string): Buffer {\n    const decryptedBase64 = this.decryptStringWithRsaPrivateKey({ text: encryptedText, privateKey });\n    return Buffer.from(decryptedBase64, this.keyBase64);\n  }\n}\n\nexport default NodeRSA;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n3.3.0 (2024-10-12)\nFeatures\n\nindex.ts: add support for encrypt and decrypt buffer (065b843), closes #26\n\n3.2.0 (2024-10-09)\nFeatures\n\nindex.ts: add support for encrypt and decrypt buffer (4737bae), closes #26\n\n3.1.1 (2024-08-15)\nBug Fixes\n\ndocs (ce1f031)\n\n3.1.0 (2024-07-21)\nBug Fixes\n\nresolve issue with enctypt and descrpt: resolve issue (#36) (a828288)\n\n3.0.1 (2024-05-14)\nBug Fixes\n\nissue (1bd3dba)\n\n3.0.0 (2024-05-14)\n2.2.3 (2024-05-14)\n2.2.2 (2024-05-14)\n2.2.1 (2024-05-14)\n2.2.0 (2024-05-14)\nFeatures\n\nchange the main functions: deprectate the old encrypt and decrypt function and create new (01288ba)\n\n2.1.5 (2023-02-28)\nChores\n\nsupport node greater than 18 and npm greater than 8 (005cf394)\n\n2.1.4 (2023-01-24)\n2.1.2 (2022-06-04)\nChores\n\n🤖 add prebuilsh script (8b49642f)\n🤖 update npm ignore (06a02399)\n\nDocumentation Changes\n\n✏️ update docs (0e0f4c9e)\n\n2.1.1 (2022-06-02)\nBug Fixes\n\n🐛 solve github work flow (f5c1c45e)\n🐛 solvw conflicts (00bd0481)\n\n2.1.0 (2022-06-02)\nDocumentation Changes\n\n✏️ update docs (dbb771af)\n\nTests\n\n💍 add tests (79b17826)\n\n2.0.1 (2022-06-02)\nDocumentation Changes\n\n✏️ update docs (dbb771af)\n\nTests\n\n💍 add tests (79b17826)\n\n2.0.0 (2022-03-23)\nDocumentation Changes\n\nupdate docs (e4e3f254)\nupdate docs (de0f8024)\n\nNew Features\n\nmake methods to take public and private keys as strings (d47af0f5)\nadd new helper methods to decode and encode keys to base64 (d3cba4c0)\nupdate the docs (4e470c6f)\n\nTests\n\nadd tests (373d6c12)\n\n1.2.1 (2022-02-11)\nDocumentation Changes\n\nupdate docs (846687b4)\n\nNew Features\n\nadd encrypt-rsa.js.org (3f6b0b4e)\n\n1.2.0 (2022-02-09)\nDocumentation Changes\n\nset docs (6f1fa5e3)\n\n1.1.0 (2021-07-21)\nDocumentation Changes\n\n✏️ update docs for creating keys (cebb2758)\n\nNew Features\n\n🎸 add create public and private keys (74c51131)\n\n1.0.12 (2021-07-20)\nChores\n\n🤖 update keywords (b435e3ba)\n\n1.0.11 (2021-07-20)\nBug Fixes\n\n🐛 solve docs (8a08c44e)\n\n1.0.10 (2021-07-20)\nDocumentation Changes\n\n✏️ update readme (e29f1805)\n\n1.0.9 (2021-07-19)\n1.0.8 (2021-07-19)\n1.0.8 (2021-07-19)\n1.0.5 (2021-07-19)\n1.0.4 (2021-07-19)\n1.0.4 (2021-07-19)\n1.0.3 (2021-07-19)\n1.0.2 (2021-07-19)\n1.0.1 (2021-07-19)\nOther Changes\n\nmiladezzat/rsa-node (5f3c40de)\n\n1.0.0 (2021-07-18)\nOther Changes\n\nmiladezzat/rsa-node (5f3c40de)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/functions/convertKetToBase64.ts\n            \n            function\n            convertKetToBase64\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/functions/createPrivateAndPublicKeys.ts\n            \n            function\n            createPrivateAndPublicKeys\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/functions/decrypt.ts\n            \n            function\n            decrypt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/functions/decryptStringWithRsaPrivateKey.ts\n            \n            function\n            decryptStringWithRsaPrivateKey\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/functions/encrypt.ts\n            \n            function\n            encrypt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/functions/encryptStringWithRsaPublicKey.ts\n            \n            function\n            encryptStringWithRsaPublicKey\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            class\n            NodeRSA\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/utils/helpers.ts\n            \n            variable\n            decode\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/helpers.ts\n            \n            variable\n            encode\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            convertKetToBase64   (src/.../convertKetToBase64.ts)\n                        \n                        \n                            createPrivateAndPublicKeys   (src/.../createPrivateAndPublicKeys.ts)\n                        \n                        \n                            decrypt   (src/.../decrypt.ts)\n                        \n                        \n                            decryptStringWithRsaPrivateKey   (src/.../decryptStringWithRsaPrivateKey.ts)\n                        \n                        \n                            encrypt   (src/.../encrypt.ts)\n                        \n                        \n                            encryptStringWithRsaPublicKey   (src/.../encryptStringWithRsaPublicKey.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/functions/convertKetToBase64.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        convertKetToBase64\n                        \n                    \n                \n            \n            \n                \nconvertKetToBase64(key: string)\n                \n            \n\n\n\n\n            \n                \n                        Converts an RSA key to a base64-encoded string.\nThis function removes any leading spaces from each line of the key and then\nencodes it to base64 format.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe RSA key to be converted to base64. It may contain leading spaces in each line.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The base64-encoded version of the RSA key.\n\n                            \n                \n            \n        \n    \n    src/functions/createPrivateAndPublicKeys.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createPrivateAndPublicKeys\n                        \n                    \n                \n            \n            \n                \ncreatePrivateAndPublicKeys(modulusLength: number)\n                \n            \n\n\n\n\n            \n                \n                        Generates a pair of RSA private and public keys with the specified modulus length.\nIf the crypto.generateKeyPairSync function is available, it generates the keys using the provided modulus length,\notherwise, it returns empty strings for both keys.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                modulusLength\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    2048\n                                            \n\n                                            \n                                                    \nThe length of the RSA modulus in bits. Defaults to 2048 bits.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         returnCreateKeys\n\n                        \n                            \n                                An object containing the generated RSA public and private keys in PEM format.\n\n                            \n                \n            \n        \n    \n    src/functions/decrypt.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        decrypt\n                        \n                    \n                \n            \n            \n                \ndecrypt(args: parametersOfDecryptPublic)\n                \n            \n\n\n\n\n            \n                \n                        Decrypts a base64-encoded string using an RSA public key.\nThe function first decodes the provided RSA public key and the base64-encoded text,\nthen decrypts the text using the RSA public key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            parametersOfDecryptPublic\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn object containing the text to decrypt and the RSA public key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The decrypted string in UTF-8 format.\n\n                            \n                \n            \n        \n    \n    src/functions/decryptStringWithRsaPrivateKey.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        decryptStringWithRsaPrivateKey\n                        \n                    \n                \n            \n            \n                \ndecryptStringWithRsaPrivateKey(args: parametersOfDecrypt)\n                \n            \n\n\n\n\n            \n                \n                        Decrypts a base64-encoded string using an RSA private key.\nThis function decodes the provided RSA private key, then uses it to decrypt the base64-encoded string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            parametersOfDecrypt\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn object containing the text to decrypt and the RSA private key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The decrypted string in UTF-8 format.\n\n                            \n                \n            \n        \n    \n    src/functions/encrypt.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        encrypt\n                        \n                    \n                \n            \n            \n                \nencrypt(args: parametersOfEncryptPrivate)\n                \n            \n\n\n\n\n            \n                \n                        Encrypts a string using an RSA private key.\nThis function encodes the provided RSA private key, converts the input text to a buffer,\nand encrypts it using the private key. The result is returned as a base64-encoded string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            parametersOfEncryptPrivate\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn object containing the text to encrypt and the RSA private key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The encrypted string in base64 format.\n\n                            \n                \n            \n        \n    \n    src/functions/encryptStringWithRsaPublicKey.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        encryptStringWithRsaPublicKey\n                        \n                    \n                \n            \n            \n                \nencryptStringWithRsaPublicKey(args: parametersOfEncrypt)\n                \n            \n\n\n\n\n            \n                \n                        Encrypts a string using an RSA public key.\nThis function decodes the provided RSA public key, converts the input text into a buffer,\nand encrypts it using the public key. The encrypted result is returned as a base64-encoded string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            parametersOfEncrypt\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn object containing the text to encrypt and the RSA public key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The encrypted string in base64 format.\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNodeRSA\nNodeRSA is a library that provides easy-to-use methods for RSA encryption and decryption. It allows generating RSA key pairs, encrypting, and decrypting strings with RSA public and private keys. This library is ideal for secure data transmission, authentication systems, and any application requiring cryptographic security.\nInstallation\nExample :npm install encrypt-rsa\n// OR\nyarn add encrypt-rsaUsage\nImporting the Library\nExample :import NodeRSA from 'encrypt-rsa';Creating an Instance\nYou can create an instance of the NodeRSA class with optional public and private keys and modulus length.\nExample :const nodeRSA = new NodeRSA(publicKey, privateKey, modulusLength);Generating RSA Key Pairs\nTo generate a new pair of RSA keys:\nExample :const { publicKey, privateKey } = nodeRSA.createPrivateAndPublicKeys(modulusLength);\nconsole.log('Public Key:', publicKey);\nconsole.log('Private Key:', privateKey);Encrypting and Decrypting Strings\nEncrypting with RSA Public Key\nExample :const text = \"Hello, World!\";\nconst encryptedString = nodeRSA.encryptStringWithRsaPublicKey({ text, publicKey });\nconsole.log('Encrypted:', encryptedString);Decrypting with RSA Private Key\nExample :const decryptedString = nodeRSA.decryptStringWithRsaPrivateKey({ text: encryptedString, privateKey });\nconsole.log('Decrypted:', decryptedString);Encrypting with RSA Private Key\nExample :const text = \"Hello, World!\";\nconst encryptedString = nodeRSA.encrypt({ text, privateKey });\nconsole.log('Encrypted with Private Key:', encryptedString);Decrypting with RSA Public Key\nExample :const decryptedString = nodeRSA.decrypt({ text: encryptedString, publicKey });\nconsole.log('Decrypted with Public Key:', decryptedString);API\nNodeRSA Class\nConstructor\nExample :constructor(publicKey?: string, privateKey?: string, modulusLength?: number)\npublicKey: Optional. The RSA public key.\nprivateKey: Optional. The RSA private key.\nmodulusLength: Optional. The modulus length for the RSA key pair (default is 2048).\n\nMethods\n\ncreatePrivateAndPublicKeys(modulusLength: number = this.modulusLength): returnCreateKeys\n\nGenerates a new pair of RSA keys.\nmodulusLength: Optional. The modulus length for the RSA key pair (default is the instance's modulus length).\nReturns an object containing the publicKey and privateKey.\n\n\nencryptStringWithRsaPublicKey(args: parametersOfEncrypt): string\n\nEncrypts a string with the given RSA public key.\nargs: Object containing text and optionally publicKey.\nReturns the encrypted string in base64 format.\n\n\ndecryptStringWithRsaPrivateKey(args: parametersOfDecrypt): string\n\nDecrypts a string with the given RSA private key.\nargs: Object containing text and optionally privateKey.\nReturns the decrypted string.\n\n\nencrypt(args: parametersOfEncryptPrivate): string\n - Encrypts a string with the given RSA private key.\n - args: Object containing text and optionally privateKey.\n - Returns the encrypted string in base64 format.\n\ndecrypt(args: parametersOfDecryptPublic): string\n\nDecrypts a string with the given RSA public key.\nargs: Object containing text and optionally publicKey.\nReturns the decrypted string.\n\n\n\nTypes\n\nparametersOfEncrypt\n\nExample :{\n  text: string;\n  publicKey?: string;\n}\nparametersOfDecrypt\n\nExample :{\n  text: string;\n  privateKey?: string;\n}\nparametersOfEncryptPrivate\n\nExample :{\n  text: string;\n  privateKey?: string;\n}\nparametersOfDecryptPublic\n\nExample :{\n  text: string;\n  publicKey?: string;\n}\nreturnCreateKeys\n\nExample :{\n  publicKey: string;\n  privateKey: string;\n}Utilities\n\nconvertKetToBase64(key: string): string \nConverts a given key to base64 format.\n\nHelper Functions\n\nencode\nEncodes a string to base64.\n\ndecode\nDecodes a base64 string.\n\n\nUse Cases\nSecure Data Transmission\nNodeRSA can be used to securely transmit sensitive data over insecure channels. Encrypt data with the recipient's public key before sending it. Only the recipient can decrypt the data with their private key.\nExample :// Sender\nconst encryptedMessage = nodeRSA.encryptStringWithRsaPublicKey({ text: \"Sensitive data\", publicKey: recipientPublicKey });\n// Send `encryptedMessage` to the recipient\n\n// Recipient\nconst decryptedMessage = nodeRSA.decryptStringWithRsaPrivateKey({ text: encryptedMessage, privateKey: recipientPrivateKey });\nconsole.log('Decrypted Message:', decryptedMessage);Authentication Systems\nNodeRSA can be used in authentication systems to encrypt credentials and sensitive information.\nExample :// Encrypting user credentials\nconst encryptedCredentials = nodeRSA.encryptStringWithRsaPublicKey({ text: \"username:password\", publicKey: serverPublicKey });\n\n// Decrypting credentials on the server\nconst decryptedCredentials = nodeRSA.decryptStringWithRsaPrivateKey({ text: encryptedCredentials, privateKey: serverPrivateKey });\nconsole.log('Decrypted Credentials:', decryptedCredentials);Buffer Encryption/Decryption Methods:\n\nencryptBufferWithRsaPublicKey: Converts a buffer to Base64 and then encrypts the Base64 string.\ndecryptBufferWithRsaPrivateKey: Decrypts the Base64 string and converts it back to a buffer.\n\nExample Usage\nExample :const nodeRSA = new NodeRSA();\n\n// Generate keys\nconst { publicKey, privateKey } = nodeRSA.createPrivateAndPublicKeys();\n\n// Example buffer\nconst buffer = Buffer.from('This is some binary data');\n\n// Encrypt the buffer\nconst encryptedBuffer = nodeRSA.encryptBufferWithRsaPublicKey(buffer, publicKey);\nconsole.log('Encrypted Buffer:', encryptedBuffer);\n\n// Decrypt back to buffer\nconst decryptedBuffer = nodeRSA.decryptBufferWithRsaPrivateKey(encryptedBuffer, privateKey);\nconsole.log('Decrypted Buffer:', decryptedBuffer.toString());  // should log: 'This is some binary data'Digital Signatures\nAlthough not directly covered by the current implementation, RSA can also be used for creating and verifying digital signatures to ensure data integrity and authenticity.\nContribution\nWe welcome contributions to the NodeRSA library! If you'd like to contribute, please follow these steps:\n\nFork the repository on GitHub.\nClone your forked repository to your local machine.\n\nExample :git clone git@github.com:miladezzat/encrypt-rsa.git\nCreate a new branch for your feature or bugfix.\n\nExample :git checkout -b feature/your-feature-name\nMake your changes to the codebase.\nCommit your changes with a clear and descriptive commit message.\n\nExample :git commit -m \"Description of your feature or fix\"\nPush your changes to your forked repository.\n\nExample :git push origin feature/your-feature-name\nCreate a pull request on the original repository. Be sure to include a detailed description of your changes and the problem they solve.\n\nCode of Conduct\nPlease note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.\nReporting Issues\nIf you encounter any issues, please report them using the GitHub issue tracker. Include details about the problem and your environment (OS, Node.js version, etc.).\nThank you for contributing to NodeRSA!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 Milad Ezzat\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 3.3.0\n        \n            Description : This is a little module use to encrypt and decrypt strings with RSA keys (public and private keys)\n        \n            Keywords : algorithm, node, encryption, public key, private key, rsa, node-rsa, encrypt-rsa, encrypt, encrypt by public key, decrypt by private key, rsa encryption, node-rsa typescript, Crypto-js RSA, Javascript RSA encryption\n        \n            Homepage : https://encrypt-rsa.js.org\n        \n            Bugs : https://github.com/miladezzat/encrypt-rsa/issues\n        \n            License : ISC\n        \n            Repository : git+https://github.com/miladezzat/encrypt-rsa.git\n        \n            Author : Milad E. Fahmy  (https://milad-ezzat.vercel.app)\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            parametersOfDecrypt   (src/.../types.ts)\n                        \n                        \n                            parametersOfDecryptPublic   (src/.../types.ts)\n                        \n                        \n                            parametersOfEncrypt   (src/.../types.ts)\n                        \n                        \n                            parametersOfEncryptPrivate   (src/.../types.ts)\n                        \n                        \n                            returnCreateKeys   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/types.ts\n    \n    \n        \n            \n                \n                    \n                    parametersOfDecrypt\n                \n            \n            \n                \n                    Type representing the parameters required to decrypt text using a private key.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    parametersOfDecryptPublic\n                \n            \n            \n                \n                    Type representing the parameters required to decrypt text using a public key.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    parametersOfEncrypt\n                \n            \n            \n                \n                    Type representing the parameters required to encrypt text using a public key.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    parametersOfEncryptPrivate\n                \n            \n            \n                \n                    Type representing the parameters required to encrypt text using a private key.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    returnCreateKeys\n                \n            \n            \n                \n                    Type representing the return value of a function that creates RSA keys.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            decode   (src/.../helpers.ts)\n                        \n                        \n                            encode   (src/.../helpers.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        decode\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (str: string): string => {\n  try {\n    return Buffer.from(str, 'base64').toString('utf-8');\n  } catch (error) {\n    throw new Error('Failed to decode base64 string');\n  }\n}\n                    \n                \n\n            \n                \n                    Decodes a base64-encoded string into a UTF-8 string.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (str: string): string => {\n  try {\n    return Buffer.from(str, 'utf-8').toString('base64');\n  } catch (error) {\n    throw new Error('Failed to encode string to base64');\n  }\n}\n                    \n                \n\n            \n                \n                    Encodes a UTF-8 string into a base64-encoded string.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
