var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/NodeRSA.html",[0,0.866,1,1.088]],["body/classes/NodeRSA.html",[0,0.988,1,1.413,2,0.976,3,0.976,4,0.976,5,0.578,6,0.736,7,1.531,8,1.213,9,2.073,10,2.64,11,1.41,12,1.708,13,1.488,14,0.985,15,1.608,16,2.045,17,1.835,18,1.213,19,1.213,20,1.242,21,1.229,22,0.366,23,0.953,24,2.052,25,1.855,26,2.836,27,2.77,28,1.216,29,0.64,30,1.213,31,1.41,32,0.64,33,1.213,34,1.41,35,0.736,36,1.213,37,2.03,38,3.499,39,1.608,40,1.608,41,0.603,42,1.213,43,2.203,44,0.091,45,1.855,46,1.732,47,2.203,48,2.633,49,1.539,50,1.855,51,1.855,52,2.137,53,1.608,54,1.679,55,0.976,56,1.213,57,1.216,58,2.833,59,0.976,60,1.795,61,0.976,62,1.216,63,0.976,64,1.213,65,0.953,66,1.213,67,0.759,68,0.46,69,1.548,70,2.145,71,1.123,72,1.213,73,0.953,74,1.242,75,0.976,76,1.679,77,2.203,78,2.362,79,2.073,80,1.708,81,1.679,82,2.38,83,1.608,84,0.976,85,2.052,86,1.285,87,0.953,88,1.242,89,0.976,90,0.953,91,1.242,92,0.976,93,1.679,94,1.608,95,0.976,96,0.953,97,1.242,98,0.976,99,2.26,100,0.578,101,0.976,102,0.976,103,0.976,104,0.976,105,0.976,106,0.976,107,0.976,108,3.499,109,0.976,110,2.052,111,2.052,112,1.608,113,2.137,114,1.775,115,1.608,116,1.608,117,0.976,118,1.608,119,0.976,120,0.976,121,0.976,122,0.976,123,0.976,124,0.976,125,0.033,126,0.033]],["title/changelog.html",[127,1.166,128,1.166,129,1.485]],["body/changelog.html",[5,1.057,11,1.521,14,0.97,17,0.841,20,0.757,21,0.757,29,0.58,32,0.68,41,1.307,44,0.085,86,0.669,125,0.053,126,0.053,129,1.346,130,1.784,131,3.021,132,1.346,133,1.784,134,1.784,135,1.784,136,0.841,137,1.346,138,1.784,139,1.346,140,3.897,141,1.784,142,2.567,143,3.484,144,1.784,145,2.886,146,2.567,147,1.784,148,1.784,149,1.784,150,1.784,151,1.784,152,1.784,153,3.484,154,3.484,155,4.005,156,1.784,157,1.784,158,4.143,159,2.567,160,2.567,161,2.268,162,1.784,163,1.784,164,1.784,165,1.784,166,1.784,167,3.629,168,3.629,169,1.784,170,1.784,171,1.784,172,1.784,173,1.784,174,1.784,175,1.784,176,1.784,177,0.841,178,1.784,179,1.784,180,0.841,181,1.936,182,1.784,183,1.784,184,2.567,185,3.629,186,1.784,187,3.007,188,2.268,189,2.567,190,2.567,191,1.936,192,1.057,193,1.784,194,1.784,195,1.784,196,1.784,197,1.784,198,3.739,199,3.288,200,1.784,201,1.784,202,1.784,203,1.784,204,4.005,205,1.784,206,1.784,207,2.267,208,1.784,209,1.784,210,1.936,211,1.346,212,1.784,213,1.784,214,1.784,215,1.784,216,1.784,217,1.784,218,1.784,219,2.567,220,3.629,221,2.567,222,1.784,223,1.784,224,1.784,225,1.784,226,1.784,227,1.784,228,1.346,229,1.784,230,0.841,231,1.784,232,1.346,233,0.841,234,0.841,235,1.784,236,1.784,237,1.784,238,1.784,239,1.784,240,1.784,241,1.346,242,1.784,243,1.784,244,1.784,245,1.784,246,1.784,247,3.104,248,1.346,249,1.784,250,1.784,251,1.784,252,3.007,253,1.346,254,1.784,255,1.784,256,1.784,257,1.784,258,1.784,259,1.784,260,1.784,261,3.897,262,2.567,263,1.784,264,2.567,265,1.784,266,1.784,267,1.784,268,2.567,269,2.567,270,1.784]],["title/coverage.html",[271,2.314]],["body/coverage.html",[0,1.101,1,1.384,5,1.739,6,2.214,28,1.739,29,0.663,31,1.739,32,0.663,34,1.739,41,1.101,44,0.089,46,1.384,100,1.739,125,0.073,126,0.073,180,1.974,207,1.739,233,1.384,234,1.384,271,2.214,272,2.935,273,2.935,274,2.214,275,4.307,276,4.276,277,2.214,278,2.214,279,2.214,280,2.214,281,2.214,282,2.935,283,2.697,284,3.576,285,2.935,286,2.935]],["title/miscellaneous/functions.html",[177,1.298,287,0.58]],["body/miscellaneous/functions.html",[7,1.723,12,1.814,13,1.59,14,0.978,16,1.998,17,1.227,19,1.372,20,1.171,21,1.154,22,0.682,25,1.077,28,1.542,29,0.793,31,1.542,32,0.75,34,1.542,37,1.542,43,2.164,44,0.084,45,2.164,46,1.723,47,2.164,49,1.595,50,1.801,51,1.801,52,1.963,54,2.164,56,1.372,57,1.542,62,1.077,65,1.077,67,0.858,68,0.858,70,2.228,71,0.858,72,1.372,73,1.077,74,1.227,76,1.801,77,1.966,79,1.801,80,1.814,81,1.542,86,1.524,87,1.077,88,1.227,90,1.077,91,1.227,93,1.966,96,1.077,97,1.227,100,1.542,125,0.053,126,0.053,136,0.858,177,0.858,180,1.723,192,1.542,230,0.858,274,1.372,277,1.372,278,1.372,279,1.372,280,1.372,281,1.372,287,0.536,288,1.818,289,1.818,290,1.818,291,1.818,292,1.818,293,1.818,294,1.372,295,2.293,296,2.901,297,1.818,298,2.602,299,2.602,300,2.602,301,2.602,302,1.542,303,1.818,304,1.818,305,1.963,306,1.818,307,1.818,308,1.818,309,2.648,310,1.372,311,1.818,312,2.648,313,2.648,314,1.818,315,1.818,316,1.801,317,1.963,318,1.818,319,2.602,320,2.602,321,2.602]],["title/index.html",[22,0.738,127,1.166,128,1.166]],["body/index.html",[0,0.724,1,1.756,7,0.91,8,0.922,9,0.724,10,0.922,11,1.416,12,0.576,13,1.509,14,0.871,16,1.977,17,1.607,18,0.922,20,1.034,21,1.034,25,1.416,26,2.946,27,2.917,29,0.436,30,0.922,32,0.71,33,0.922,35,0.922,36,0.922,37,1.143,41,1.108,42,1.455,44,0.089,45,1.143,47,1.75,49,1.518,50,1.608,51,1.608,54,1.416,57,0.724,60,1.803,62,0.724,65,1.608,66,2.228,67,0.91,69,0.922,70,1.75,71,0.91,73,0.724,74,0.91,76,1.416,77,1.608,79,1.143,80,1.872,81,1.143,86,1.278,87,0.724,88,0.91,90,0.724,91,0.91,93,1.416,96,0.724,97,0.91,99,0.922,113,2.971,125,0.039,126,0.039,131,2.047,132,1.455,136,0.576,137,1.803,145,0.922,161,0.922,177,0.576,181,1.803,191,0.922,210,0.922,211,1.455,228,0.922,230,0.91,232,0.922,233,0.576,234,0.576,248,0.922,294,0.922,295,1.803,302,0.724,305,0.922,312,2.228,313,2.228,316,0.724,322,2.714,323,1.222,324,1.143,325,1.222,326,1.222,327,1.929,328,2.39,329,2.39,330,1.222,331,1.929,332,3.407,333,1.929,334,1.929,335,2.39,336,1.222,337,1.222,338,1.222,339,1.222,340,1.222,341,4.087,342,1.222,343,1.222,344,1.222,345,1.222,346,1.222,347,1.222,348,1.222,349,1.929,350,1.222,351,1.222,352,1.222,353,1.222,354,1.929,355,1.929,356,2.714,357,2.39,358,2.39,359,1.929,360,1.929,361,2.39,362,2.954,363,1.222,364,1.222,365,1.222,366,1.222,367,1.222,368,2.714,369,1.222,370,1.222,371,1.222,372,1.222,373,1.222,374,2.39,375,1.222,376,1.222,377,1.222,378,1.222,379,1.222,380,1.222,381,2.39,382,1.222,383,2.39,384,1.222,385,1.222,386,1.222,387,1.222,388,1.929,389,1.222,390,2.714,391,1.222,392,1.222,393,1.929,394,1.222,395,1.222,396,1.222,397,1.222,398,1.222,399,1.222,400,1.929,401,1.222,402,1.222,403,1.222,404,1.929,405,1.929,406,1.222,407,1.222,408,1.222,409,1.222,410,1.222,411,1.222,412,1.929,413,1.222,414,1.222,415,1.222,416,1.222,417,1.222,418,1.222,419,1.222,420,1.222,421,1.222,422,1.222,423,1.222,424,1.222,425,1.222,426,1.222,427,1.222,428,2.39,429,1.222,430,1.222,431,1.222,432,2.047,433,1.929,434,1.929,435,1.222,436,1.222,437,2.714,438,1.222,439,0.922,440,1.222,441,2.714,442,1.222,443,1.222,444,1.222,445,1.929,446,1.222,447,1.222,448,1.222,449,1.222,450,1.222,451,1.929,452,1.222,453,1.222,454,1.222,455,1.222,456,1.222,457,1.929,458,1.222,459,1.929,460,1.929,461,1.929,462,1.222,463,1.222,464,1.222,465,1.222,466,1.222,467,1.222,468,1.222,469,1.222,470,1.929,471,1.222,472,1.222,473,1.222,474,1.222,475,1.222,476,1.222,477,1.222,478,1.222,479,1.222,480,1.222]],["title/license.html",[127,1.166,128,1.166,481,1.166]],["body/license.html",[44,0.07,78,2.584,125,0.07,126,0.07,207,1.622,247,2.065,309,2.065,310,2.065,324,2.029,481,1.622,482,2.737,483,3.738,484,2.737,485,2.065,486,2.737,487,3.425,488,2.737,489,2.737,490,2.737,491,2.737,492,2.737,493,2.737,494,3.425,495,4.257,496,2.737,497,2.737,498,2.737,499,3.738,500,2.737,501,2.737,502,2.737,503,2.737,504,2.737,505,2.737,506,2.737,507,2.737,508,2.737,509,2.737,510,3.425,511,2.737,512,2.737,513,2.737,514,2.737,515,2.737,516,2.737,517,2.737,518,3.425,519,3.425,520,2.737,521,2.737,522,2.737,523,2.737,524,2.737,525,2.737,526,2.737,527,2.737,528,2.737,529,2.737,530,2.737,531,2.737,532,2.737,533,2.737,534,2.737,535,2.737,536,2.737,537,2.737,538,2.737,539,2.737,540,2.737,541,2.737,542,2.737,543,2.737,544,2.737,545,2.737,546,2.737,547,2.737,548,2.737]],["title/modules.html",[549,2.314]],["body/modules.html",[44,0.08,125,0.08,126,0.08,549,2.602]],["title/overview.html",[550,2.314]],["body/overview.html",[0,1.287,44,0.08,125,0.08,126,0.08,550,2.587,551,3.43]],["title/properties.html",[23,1.631,552,1.968]],["body/properties.html",[7,1.358,9,2.266,13,1.599,14,1.042,20,1.127,21,1.127,23,1.706,29,0.799,32,0.901,44,0.088,49,1.496,125,0.072,126,0.072,136,1.358,139,2.172,188,2.885,230,1.358,241,2.172,253,2.172,324,1.706,432,2.172,439,2.172,481,1.706,485,2.172,553,2.879,554,2.879,555,2.879,556,2.879,557,2.879,558,2.879,559,2.879,560,2.879,561,2.879,562,2.879,563,2.879,564,2.879,565,2.879,566,2.879,567,2.879,568,2.879,569,2.879,570,2.879,571,2.879]],["title/miscellaneous/typealiases.html",[287,0.58,572,2.752]],["body/miscellaneous/typealiases.html",[12,1.876,13,1.073,14,0.843,20,1.037,21,1.037,22,1.073,29,0.795,32,0.795,43,2.357,44,0.072,46,2.046,49,1.492,64,2.157,68,1.348,71,1.66,74,1.66,80,1.876,88,1.66,91,1.66,97,1.66,114,1.694,125,0.072,126,0.072,180,1.348,287,0.843,573,2.859,574,4.084,575,2.859,576,4.084,577,3.978,578,4.084]],["title/miscellaneous/variables.html",[287,0.58,579,2.076]],["body/miscellaneous/variables.html",[16,2.034,22,1.068,41,1.316,44,0.091,67,1.655,68,1.655,86,1.49,114,2.079,125,0.072,126,0.072,192,2.254,233,1.794,234,1.794,283,2.146,287,0.839,296,2.647,302,1.686,316,1.686,317,2.87,579,2.146,580,3.509,581,3.509,582,3.509,583,3.509,584,2.845,585,3.509,586,3.509,587,3.509,588,3.509,589,2.845]]],"invertedIndex":[["",{"_index":44,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["005cf394",{"_index":193,"title":{},"body":{"changelog.html":{}}}],["00bd0481",{"_index":217,"title":{},"body":{"changelog.html":{}}}],["01",{"_index":195,"title":{},"body":{"changelog.html":{}}}],["01288ba",{"_index":182,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":185,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":224,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":200,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":167,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":199,"title":{},"body":{"changelog.html":{}}}],["06a02399",{"_index":206,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":158,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":151,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":142,"title":{},"body":{"changelog.html":{}}}],["0e0f4c9e",{"_index":208,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":551,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":270,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":267,"title":{},"body":{"changelog.html":{}}}],["1.0.10",{"_index":257,"title":{},"body":{"changelog.html":{}}}],["1.0.11",{"_index":255,"title":{},"body":{"changelog.html":{}}}],["1.0.12",{"_index":251,"title":{},"body":{"changelog.html":{}}}],["1.0.2",{"_index":266,"title":{},"body":{"changelog.html":{}}}],["1.0.3",{"_index":265,"title":{},"body":{"changelog.html":{}}}],["1.0.4",{"_index":264,"title":{},"body":{"changelog.html":{}}}],["1.0.5",{"_index":263,"title":{},"body":{"changelog.html":{}}}],["1.0.8",{"_index":262,"title":{},"body":{"changelog.html":{}}}],["1.0.9",{"_index":260,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":246,"title":{},"body":{"changelog.html":{}}}],["1.2.0",{"_index":243,"title":{},"body":{"changelog.html":{}}}],["1.2.1",{"_index":238,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":276,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":141,"title":{},"body":{"changelog.html":{}}}],["100",{"_index":275,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":239,"title":{},"body":{"changelog.html":{}}}],["13/13",{"_index":282,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":168,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":152,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":190,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":261,"title":{},"body":{"changelog.html":{}}}],["1bd3dba",{"_index":169,"title":{},"body":{"changelog.html":{}}}],["2.0.0",{"_index":223,"title":{},"body":{"changelog.html":{}}}],["2.0.1",{"_index":222,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":218,"title":{},"body":{"changelog.html":{}}}],["2.1.1",{"_index":209,"title":{},"body":{"changelog.html":{}}}],["2.1.2",{"_index":197,"title":{},"body":{"changelog.html":{}}}],["2.1.4",{"_index":194,"title":{},"body":{"changelog.html":{}}}],["2.1.5",{"_index":183,"title":{},"body":{"changelog.html":{}}}],["2.2.0",{"_index":174,"title":{},"body":{"changelog.html":{}}}],["2.2.1",{"_index":173,"title":{},"body":{"changelog.html":{}}}],["2.2.2",{"_index":172,"title":{},"body":{"changelog.html":{}}}],["2.2.3",{"_index":171,"title":{},"body":{"changelog.html":{}}}],["20",{"_index":252,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":247,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2022",{"_index":198,"title":{},"body":{"changelog.html":{}}}],["2023",{"_index":184,"title":{},"body":{"changelog.html":{}}}],["2024",{"_index":140,"title":{},"body":{"changelog.html":{}}}],["2048",{"_index":57,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["21",{"_index":159,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":225,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":196,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":149,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":186,"title":{},"body":{"changelog.html":{}}}],["3.0.0",{"_index":170,"title":{},"body":{"changelog.html":{}}}],["3.0.1",{"_index":166,"title":{},"body":{"changelog.html":{}}}],["3.1.0",{"_index":157,"title":{},"body":{"changelog.html":{}}}],["3.1.1",{"_index":150,"title":{},"body":{"changelog.html":{}}}],["3.2.0",{"_index":139,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["36",{"_index":164,"title":{},"body":{"changelog.html":{}}}],["373d6c12",{"_index":237,"title":{},"body":{"changelog.html":{}}}],["3f6b0b4e",{"_index":242,"title":{},"body":{"changelog.html":{}}}],["4737bae",{"_index":147,"title":{},"body":{"changelog.html":{}}}],["4e470c6f",{"_index":236,"title":{},"body":{"changelog.html":{}}}],["5f3c40de",{"_index":269,"title":{},"body":{"changelog.html":{}}}],["6f1fa5e3",{"_index":245,"title":{},"body":{"changelog.html":{}}}],["74c51131",{"_index":250,"title":{},"body":{"changelog.html":{}}}],["79b17826",{"_index":221,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":192,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["8').tostring('base64",{"_index":589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["846687b4",{"_index":240,"title":{},"body":{"changelog.html":{}}}],["8a08c44e",{"_index":256,"title":{},"body":{"changelog.html":{}}}],["8b49642f",{"_index":203,"title":{},"body":{"changelog.html":{}}}],["a828288",{"_index":165,"title":{},"body":{"changelog.html":{}}}],["abide",{"_index":467,"title":{},"body":{"index.html":{}}}],["above",{"_index":517,"title":{},"body":{"license.html":{}}}],["action",{"_index":542,"title":{},"body":{"license.html":{}}}],["add",{"_index":145,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["agree",{"_index":466,"title":{},"body":{"index.html":{}}}],["algorithm",{"_index":555,"title":{},"body":{"properties.html":{}}}],["aliases",{"_index":573,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allows",{"_index":325,"title":{},"body":{"index.html":{}}}],["although",{"_index":413,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":508,"title":{},"body":{"license.html":{}}}],["application",{"_index":336,"title":{},"body":{"index.html":{}}}],["args",{"_index":77,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["arising",{"_index":545,"title":{},"body":{"license.html":{}}}],["associated",{"_index":496,"title":{},"body":{"license.html":{}}}],["authentication",{"_index":334,"title":{},"body":{"index.html":{}}}],["authenticity",{"_index":422,"title":{},"body":{"index.html":{}}}],["author",{"_index":567,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":535,"title":{},"body":{"license.html":{}}}],["available",{"_index":308,"title":{},"body":{"miscellaneous/functions.html":{}}}],["b",{"_index":444,"title":{},"body":{"index.html":{}}}],["b435e3ba",{"_index":254,"title":{},"body":{"changelog.html":{}}}],["back",{"_index":400,"title":{},"body":{"index.html":{}}}],["base64",{"_index":86,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["base64').tostring('utf",{"_index":584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base64string",{"_index":118,"title":{},"body":{"classes/NodeRSA.html":{}}}],["before",{"_index":379,"title":{},"body":{"index.html":{}}}],["binary",{"_index":404,"title":{},"body":{"index.html":{}}}],["bits",{"_index":52,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":19,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{}}}],["branch",{"_index":440,"title":{},"body":{"index.html":{}}}],["buffer",{"_index":17,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["buffer.from('this",{"_index":403,"title":{},"body":{"index.html":{}}}],["buffer.from(decryptedbase64",{"_index":123,"title":{},"body":{"classes/NodeRSA.html":{}}}],["buffer.from(str",{"_index":583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.tostring(this.keybase64",{"_index":119,"title":{},"body":{"classes/NodeRSA.html":{}}}],["bug",{"_index":153,"title":{},"body":{"changelog.html":{}}}],["bugfix",{"_index":442,"title":{},"body":{"index.html":{}}}],["bugs",{"_index":562,"title":{},"body":{"properties.html":{}}}],["c",{"_index":484,"title":{},"body":{"license.html":{}}}],["cases",{"_index":371,"title":{},"body":{"index.html":{}}}],["catch",{"_index":585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ce1f031",{"_index":156,"title":{},"body":{"changelog.html":{}}}],["cebb2758",{"_index":249,"title":{},"body":{"changelog.html":{}}}],["change",{"_index":175,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":129,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":131,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["channels",{"_index":377,"title":{},"body":{"index.html":{}}}],["charge",{"_index":491,"title":{},"body":{"license.html":{}}}],["checkout",{"_index":443,"title":{},"body":{"index.html":{}}}],["chores",{"_index":187,"title":{},"body":{"changelog.html":{}}}],["claim",{"_index":538,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/NodeRSA.html":{}},"body":{"classes/NodeRSA.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/NodeRSA.html":{}}}],["clear",{"_index":447,"title":{},"body":{"index.html":{}}}],["clone",{"_index":433,"title":{},"body":{"index.html":{}}}],["closes",{"_index":148,"title":{},"body":{"changelog.html":{}}}],["code",{"_index":460,"title":{},"body":{"index.html":{}}}],["codebase",{"_index":446,"title":{},"body":{"index.html":{}}}],["commit",{"_index":137,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["conditions",{"_index":516,"title":{},"body":{"license.html":{}}}],["conduct",{"_index":461,"title":{},"body":{"index.html":{}}}],["conflicts",{"_index":216,"title":{},"body":{"changelog.html":{}}}],["connection",{"_index":547,"title":{},"body":{"license.html":{}}}],["console.log('decrypted",{"_index":362,"title":{},"body":{"index.html":{}}}],["console.log('encrypted",{"_index":358,"title":{},"body":{"index.html":{}}}],["console.log('private",{"_index":352,"title":{},"body":{"index.html":{}}}],["console.log('public",{"_index":351,"title":{},"body":{"index.html":{}}}],["const",{"_index":113,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["constructor",{"_index":35,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["constructor(publickey",{"_index":36,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["constructs",{"_index":40,"title":{},"body":{"classes/NodeRSA.html":{}}}],["contain",{"_index":304,"title":{},"body":{"miscellaneous/functions.html":{}}}],["containing",{"_index":313,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["contract",{"_index":543,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":427,"title":{},"body":{"index.html":{}}}],["contributing",{"_index":480,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":423,"title":{},"body":{"index.html":{}}}],["contributions",{"_index":425,"title":{},"body":{"index.html":{}}}],["contributor",{"_index":464,"title":{},"body":{"index.html":{}}}],["converted",{"_index":303,"title":{},"body":{"miscellaneous/functions.html":{}}}],["convertkettobase64",{"_index":100,"title":{},"body":{"classes/NodeRSA.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["convertkettobase64(key",{"_index":294,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["convertkettobase64(privatekey",{"_index":116,"title":{},"body":{"classes/NodeRSA.html":{}}}],["convertkettobase64(publickey",{"_index":115,"title":{},"body":{"classes/NodeRSA.html":{}}}],["converts",{"_index":295,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["copies",{"_index":510,"title":{},"body":{"license.html":{}}}],["copy",{"_index":494,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":483,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":271,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covered",{"_index":415,"title":{},"body":{"index.html":{}}}],["create",{"_index":181,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["createprivateandpublickeys",{"_index":28,"title":{},"body":{"classes/NodeRSA.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createprivateandpublickeys(moduluslength",{"_index":62,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["creates",{"_index":64,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/typealiases.html":{}}}],["creating",{"_index":248,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["credentials",{"_index":390,"title":{},"body":{"index.html":{}}}],["crypto",{"_index":557,"title":{},"body":{"properties.html":{}}}],["crypto.generatekeypairsync",{"_index":307,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cryptographic",{"_index":338,"title":{},"body":{"index.html":{}}}],["current",{"_index":416,"title":{},"body":{"index.html":{}}}],["d3cba4c0",{"_index":235,"title":{},"body":{"changelog.html":{}}}],["d47af0f5",{"_index":231,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":539,"title":{},"body":{"license.html":{}}}],["data",{"_index":332,"title":{},"body":{"index.html":{}}}],["data'digital",{"_index":411,"title":{},"body":{"index.html":{}}}],["dbb771af",{"_index":219,"title":{},"body":{"changelog.html":{}}}],["de0f8024",{"_index":227,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":498,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":548,"title":{},"body":{"license.html":{}}}],["decode",{"_index":233,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["decodes",{"_index":316,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["decrypt",{"_index":29,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["decrypt(args",{"_index":73,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["decryptbufferwithrsaprivatekey",{"_index":30,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["decryptbufferwithrsaprivatekey(encryptedtext",{"_index":83,"title":{},"body":{"classes/NodeRSA.html":{}}}],["decrypted",{"_index":81,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["decryptedbase64",{"_index":121,"title":{},"body":{"classes/NodeRSA.html":{}}}],["decryptedbuffer",{"_index":407,"title":{},"body":{"index.html":{}}}],["decryptedbuffer.tostring",{"_index":409,"title":{},"body":{"index.html":{}}}],["decryptedcredentials",{"_index":397,"title":{},"body":{"index.html":{}}}],["decryptedcredentials);buffer",{"_index":399,"title":{},"body":{"index.html":{}}}],["decryptedmessage",{"_index":386,"title":{},"body":{"index.html":{}}}],["decryptedmessage);authentication",{"_index":389,"title":{},"body":{"index.html":{}}}],["decryptedstring",{"_index":360,"title":{},"body":{"index.html":{}}}],["decryptedstring);api",{"_index":366,"title":{},"body":{"index.html":{}}}],["decryptedstring);encrypting",{"_index":363,"title":{},"body":{"index.html":{}}}],["decrypting",{"_index":329,"title":{},"body":{"index.html":{}}}],["decryption",{"_index":10,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["decrypts",{"_index":76,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["decryptstringwithrsaprivatekey",{"_index":31,"title":{},"body":{"classes/NodeRSA.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["decryptstringwithrsaprivatekey(args",{"_index":87,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["default",{"_index":67,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":56,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{}}}],["defined",{"_index":38,"title":{},"body":{"classes/NodeRSA.html":{}}}],["deprectate",{"_index":178,"title":{},"body":{"changelog.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["descriptive",{"_index":448,"title":{},"body":{"index.html":{}}}],["descrpt",{"_index":163,"title":{},"body":{"changelog.html":{}}}],["detailed",{"_index":458,"title":{},"body":{"index.html":{}}}],["details",{"_index":474,"title":{},"body":{"index.html":{}}}],["digital",{"_index":419,"title":{},"body":{"index.html":{}}}],["directly",{"_index":414,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":506,"title":{},"body":{"license.html":{}}}],["docs",{"_index":155,"title":{},"body":{"changelog.html":{}}}],["documentation",{"_index":207,"title":{},"body":{"changelog.html":{},"coverage.html":{},"license.html":{}}}],["documented",{"_index":133,"title":{},"body":{"changelog.html":{}}}],["e",{"_index":568,"title":{},"body":{"properties.html":{}}}],["e29f1805",{"_index":259,"title":{},"body":{"changelog.html":{}}}],["e4e3f254",{"_index":226,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":300,"title":{},"body":{"miscellaneous/functions.html":{}}}],["easy",{"_index":323,"title":{},"body":{"index.html":{}}}],["empty",{"_index":311,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encode",{"_index":234,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["encoded",{"_index":296,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["encodes",{"_index":302,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["encoding",{"_index":53,"title":{},"body":{"classes/NodeRSA.html":{}}}],["encounter",{"_index":471,"title":{},"body":{"index.html":{}}}],["encrypt",{"_index":32,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["encrypt(args",{"_index":90,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["encryptbufferwithrsapublickey",{"_index":33,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["encryptbufferwithrsapublickey(buffer",{"_index":94,"title":{},"body":{"classes/NodeRSA.html":{}}}],["encrypted",{"_index":79,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["encryptedbuffer",{"_index":405,"title":{},"body":{"index.html":{}}}],["encryptedcredentials",{"_index":393,"title":{},"body":{"index.html":{}}}],["encryptedmessage",{"_index":383,"title":{},"body":{"index.html":{}}}],["encryptedstring",{"_index":356,"title":{},"body":{"index.html":{}}}],["encryptedstring);decrypting",{"_index":359,"title":{},"body":{"index.html":{}}}],["encryptedtext",{"_index":85,"title":{},"body":{"classes/NodeRSA.html":{}}}],["encrypting",{"_index":328,"title":{},"body":{"index.html":{}}}],["encryption",{"_index":9,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{},"properties.html":{}}}],["encryption/decryption",{"_index":18,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["encrypts",{"_index":93,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["encryptstringwithrsapublickey",{"_index":34,"title":{},"body":{"classes/NodeRSA.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["encryptstringwithrsapublickey(args",{"_index":96,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["enctypt",{"_index":162,"title":{},"body":{"changelog.html":{}}}],["ensure",{"_index":420,"title":{},"body":{"index.html":{}}}],["environment",{"_index":475,"title":{},"body":{"index.html":{}}}],["error",{"_index":586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error('failed",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["etc",{"_index":478,"title":{},"body":{"index.html":{}}}],["event",{"_index":534,"title":{},"body":{"license.html":{}}}],["example",{"_index":341,"title":{},"body":{"index.html":{}}}],["export",{"_index":124,"title":{},"body":{"classes/NodeRSA.html":{}}}],["express",{"_index":525,"title":{},"body":{"license.html":{}}}],["ezzat",{"_index":486,"title":{},"body":{"license.html":{}}}],["ezzat.vercel.app",{"_index":571,"title":{},"body":{"properties.html":{}}}],["f5c1c45e",{"_index":214,"title":{},"body":{"changelog.html":{}}}],["fahmy",{"_index":569,"title":{},"body":{"properties.html":{}}}],["feature",{"_index":441,"title":{},"body":{"index.html":{}}}],["feature/your",{"_index":445,"title":{},"body":{"index.html":{}}}],["features",{"_index":143,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"coverage.html":{}}}],["files",{"_index":497,"title":{},"body":{"license.html":{}}}],["first",{"_index":315,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fitness",{"_index":530,"title":{},"body":{"license.html":{}}}],["fix",{"_index":450,"title":{},"body":{"index.html":{}}}],["fixes",{"_index":154,"title":{},"body":{"changelog.html":{}}}],["flow",{"_index":213,"title":{},"body":{"changelog.html":{}}}],["follow",{"_index":429,"title":{},"body":{"index.html":{}}}],["following",{"_index":515,"title":{},"body":{"license.html":{}}}],["fork",{"_index":431,"title":{},"body":{"index.html":{}}}],["forked",{"_index":434,"title":{},"body":{"index.html":{}}}],["format",{"_index":54,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["free",{"_index":490,"title":{},"body":{"license.html":{}}}],["function",{"_index":180,"title":{},"body":{"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":177,"title":{"miscellaneous/functions.html":{}},"body":{"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["functions/convertkettobase64",{"_index":101,"title":{},"body":{"classes/NodeRSA.html":{}}}],["functions/createprivateandpublickeys",{"_index":102,"title":{},"body":{"classes/NodeRSA.html":{}}}],["functions/decrypt",{"_index":103,"title":{},"body":{"classes/NodeRSA.html":{}}}],["functions/decryptstringwithrsaprivatekey",{"_index":104,"title":{},"body":{"classes/NodeRSA.html":{}}}],["functions/encrypt",{"_index":105,"title":{},"body":{"classes/NodeRSA.html":{}}}],["functions/encryptstringwithrsapublickey",{"_index":106,"title":{},"body":{"classes/NodeRSA.html":{}}}],["furnished",{"_index":513,"title":{},"body":{"license.html":{}}}],["generate",{"_index":349,"title":{},"body":{"index.html":{}}}],["generated",{"_index":72,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{}}}],["generates",{"_index":305,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["generating",{"_index":326,"title":{},"body":{"index.html":{}}}],["getting",{"_index":127,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["git",{"_index":437,"title":{},"body":{"index.html":{}}}],["git+https://github.com/miladezzat/encrypt",{"_index":566,"title":{},"body":{"properties.html":{}}}],["git@github.com:miladezzat/encrypt",{"_index":438,"title":{},"body":{"index.html":{}}}],["github",{"_index":211,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["given",{"_index":66,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["granted",{"_index":489,"title":{},"body":{"license.html":{}}}],["greater",{"_index":189,"title":{},"body":{"changelog.html":{}}}],["guidelines",{"_index":138,"title":{},"body":{"changelog.html":{}}}],["hello",{"_index":354,"title":{},"body":{"index.html":{}}}],["helper",{"_index":232,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["hereby",{"_index":488,"title":{},"body":{"license.html":{}}}],["holders",{"_index":536,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":560,"title":{},"body":{"properties.html":{}}}],["https://encrypt",{"_index":561,"title":{},"body":{"properties.html":{}}}],["https://github.com/miladezzat/encrypt",{"_index":563,"title":{},"body":{"properties.html":{}}}],["https://milad",{"_index":570,"title":{},"body":{"properties.html":{}}}],["ideal",{"_index":330,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":272,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":205,"title":{},"body":{"changelog.html":{}}}],["implementation",{"_index":417,"title":{},"body":{"index.html":{}}}],["implied",{"_index":526,"title":{},"body":{"license.html":{}}}],["import",{"_index":99,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["importing",{"_index":345,"title":{},"body":{"index.html":{}}}],["include",{"_index":457,"title":{},"body":{"index.html":{}}}],["included",{"_index":520,"title":{},"body":{"license.html":{}}}],["including",{"_index":78,"title":{},"body":{"classes/NodeRSA.html":{},"license.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index.ts",{"_index":144,"title":{},"body":{"changelog.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/NodeRSA.html":{}}}],["information",{"_index":391,"title":{},"body":{"index.html":{}}}],["input",{"_index":319,"title":{},"body":{"miscellaneous/functions.html":{}}}],["insecure",{"_index":376,"title":{},"body":{"index.html":{}}}],["install",{"_index":342,"title":{},"body":{"index.html":{}}}],["installation",{"_index":340,"title":{},"body":{"index.html":{}}}],["instance",{"_index":42,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["instance's",{"_index":367,"title":{},"body":{"index.html":{}}}],["integrity",{"_index":421,"title":{},"body":{"index.html":{}}}],["isc",{"_index":565,"title":{},"body":{"properties.html":{}}}],["issue",{"_index":161,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["issues",{"_index":470,"title":{},"body":{"index.html":{}}}],["javascript",{"_index":559,"title":{},"body":{"properties.html":{}}}],["js",{"_index":558,"title":{},"body":{"properties.html":{}}}],["key",{"_index":49,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["keybase64",{"_index":24,"title":{},"body":{"classes/NodeRSA.html":{}}}],["keys",{"_index":14,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["keywords",{"_index":253,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["kind",{"_index":524,"title":{},"body":{"license.html":{}}}],["leading",{"_index":298,"title":{},"body":{"miscellaneous/functions.html":{}}}],["length",{"_index":50,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["liability",{"_index":540,"title":{},"body":{"license.html":{}}}],["liable",{"_index":537,"title":{},"body":{"license.html":{}}}],["library",{"_index":322,"title":{},"body":{"index.html":{}}}],["license",{"_index":481,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["limitation",{"_index":501,"title":{},"body":{"license.html":{}}}],["limited",{"_index":527,"title":{},"body":{"license.html":{}}}],["line",{"_index":301,"title":{},"body":{"miscellaneous/functions.html":{}}}],["literal",{"_index":578,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["little",{"_index":553,"title":{},"body":{"properties.html":{}}}],["local",{"_index":435,"title":{},"body":{"index.html":{}}}],["log",{"_index":410,"title":{},"body":{"index.html":{}}}],["m",{"_index":449,"title":{},"body":{"index.html":{}}}],["machine",{"_index":436,"title":{},"body":{"index.html":{}}}],["main",{"_index":176,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":228,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["matching",{"_index":126,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":529,"title":{},"body":{"license.html":{}}}],["merge",{"_index":504,"title":{},"body":{"license.html":{}}}],["message",{"_index":388,"title":{},"body":{"index.html":{}}}],["methods",{"_index":11,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"index.html":{}}}],["milad",{"_index":485,"title":{},"body":{"license.html":{},"properties.html":{}}}],["miladezzat/rsa",{"_index":268,"title":{},"body":{"changelog.html":{}}}],["miscellaneous",{"_index":287,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":482,"title":{},"body":{"license.html":{}}}],["modify",{"_index":503,"title":{},"body":{"license.html":{}}}],["module",{"_index":554,"title":{},"body":{"properties.html":{}}}],["modules",{"_index":549,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["modulus",{"_index":51,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["moduluslength",{"_index":25,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["moduluslength);generating",{"_index":348,"title":{},"body":{"index.html":{}}}],["moduluslength=2048",{"_index":109,"title":{},"body":{"classes/NodeRSA.html":{}}}],["moduluslength=this.moduluslength",{"_index":117,"title":{},"body":{"classes/NodeRSA.html":{}}}],["name",{"_index":45,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["new",{"_index":41,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["node",{"_index":188,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["node.js",{"_index":477,"title":{},"body":{"index.html":{}}}],["nodersa",{"_index":1,"title":{"classes/NodeRSA.html":{}},"body":{"classes/NodeRSA.html":{},"coverage.html":{},"index.html":{}}}],["nodersa(publickey",{"_index":347,"title":{},"body":{"index.html":{}}}],["nodersa.createprivateandpublickeys",{"_index":402,"title":{},"body":{"index.html":{}}}],["nodersa.createprivateandpublickeys(moduluslength",{"_index":350,"title":{},"body":{"index.html":{}}}],["nodersa.decrypt",{"_index":365,"title":{},"body":{"index.html":{}}}],["nodersa.decryptbufferwithrsaprivatekey(encryptedbuffer",{"_index":408,"title":{},"body":{"index.html":{}}}],["nodersa.decryptstringwithrsaprivatekey",{"_index":361,"title":{},"body":{"index.html":{}}}],["nodersa.encrypt",{"_index":364,"title":{},"body":{"index.html":{}}}],["nodersa.encryptbufferwithrsapublickey(buffer",{"_index":406,"title":{},"body":{"index.html":{}}}],["nodersa.encryptstringwithrsapublickey",{"_index":357,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":533,"title":{},"body":{"license.html":{}}}],["notable",{"_index":130,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":462,"title":{},"body":{"index.html":{}}}],["notice",{"_index":518,"title":{},"body":{"license.html":{}}}],["npm",{"_index":191,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["number",{"_index":37,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["object",{"_index":312,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["obtaining",{"_index":493,"title":{},"body":{"license.html":{}}}],["old",{"_index":179,"title":{},"body":{"changelog.html":{}}}],["optional",{"_index":47,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["optionally",{"_index":368,"title":{},"body":{"index.html":{}}}],["origin",{"_index":452,"title":{},"body":{"index.html":{}}}],["original",{"_index":455,"title":{},"body":{"index.html":{}}}],["os",{"_index":476,"title":{},"body":{"index.html":{}}}],["otherwise",{"_index":310,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["out",{"_index":546,"title":{},"body":{"license.html":{}}}],["over",{"_index":375,"title":{},"body":{"index.html":{}}}],["overview",{"_index":550,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":552,"title":{"properties.html":{}},"body":{}}],["pair",{"_index":65,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["pairs",{"_index":327,"title":{},"body":{"index.html":{}}}],["param",{"_index":108,"title":{},"body":{"classes/NodeRSA.html":{}}}],["parameters",{"_index":43,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["parametersofdecrypt",{"_index":88,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["parametersofdecryptpublic",{"_index":74,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["parametersofencrypt",{"_index":97,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["parametersofencryptprivate",{"_index":91,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["participating",{"_index":465,"title":{},"body":{"index.html":{}}}],["particular",{"_index":531,"title":{},"body":{"license.html":{}}}],["pem",{"_index":314,"title":{},"body":{"miscellaneous/functions.html":{}}}],["permission",{"_index":487,"title":{},"body":{"license.html":{}}}],["permit",{"_index":511,"title":{},"body":{"license.html":{}}}],["person",{"_index":492,"title":{},"body":{"license.html":{}}}],["persons",{"_index":512,"title":{},"body":{"license.html":{}}}],["plain",{"_index":82,"title":{},"body":{"classes/NodeRSA.html":{}}}],["please",{"_index":428,"title":{},"body":{"index.html":{}}}],["portions",{"_index":522,"title":{},"body":{"license.html":{}}}],["prebuilsh",{"_index":201,"title":{},"body":{"changelog.html":{}}}],["private",{"_index":21,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["privatekey",{"_index":26,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["privatekey);encrypting",{"_index":353,"title":{},"body":{"index.html":{}}}],["problem",{"_index":459,"title":{},"body":{"index.html":{}}}],["project",{"_index":132,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["properties",{"_index":23,"title":{"properties.html":{}},"body":{"classes/NodeRSA.html":{},"properties.html":{}}}],["provided",{"_index":309,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["provides",{"_index":8,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["public",{"_index":20,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["publickey",{"_index":27,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["publish",{"_index":505,"title":{},"body":{"license.html":{}}}],["pull",{"_index":453,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":532,"title":{},"body":{"license.html":{}}}],["push",{"_index":451,"title":{},"body":{"index.html":{}}}],["readme",{"_index":258,"title":{},"body":{"changelog.html":{}}}],["recipient",{"_index":381,"title":{},"body":{"index.html":{}}}],["recipient's",{"_index":378,"title":{},"body":{"index.html":{}}}],["recipientprivatekey",{"_index":387,"title":{},"body":{"index.html":{}}}],["recipientpublickey",{"_index":384,"title":{},"body":{"index.html":{}}}],["released",{"_index":463,"title":{},"body":{"index.html":{}}}],["removes",{"_index":297,"title":{},"body":{"miscellaneous/functions.html":{}}}],["report",{"_index":472,"title":{},"body":{"index.html":{}}}],["reporting",{"_index":469,"title":{},"body":{"index.html":{}}}],["repository",{"_index":432,"title":{},"body":{"index.html":{},"properties.html":{}}}],["representing",{"_index":576,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["request",{"_index":454,"title":{},"body":{"index.html":{}}}],["required",{"_index":577,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["requiring",{"_index":337,"title":{},"body":{"index.html":{}}}],["resolve",{"_index":160,"title":{},"body":{"changelog.html":{}}}],["restriction",{"_index":500,"title":{},"body":{"license.html":{}}}],["result",{"_index":320,"title":{},"body":{"miscellaneous/functions.html":{}}}],["results",{"_index":125,"title":{},"body":{"classes/NodeRSA.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":114,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["returncreatekeys",{"_index":71,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["returned",{"_index":321,"title":{},"body":{"miscellaneous/functions.html":{}}}],["returns",{"_index":70,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["rights",{"_index":502,"title":{},"body":{"license.html":{}}}],["rsa",{"_index":13,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["rsa';creating",{"_index":346,"title":{},"body":{"index.html":{}}}],["rsa.git",{"_index":439,"title":{},"body":{"index.html":{},"properties.html":{}}}],["rsa.js.org",{"_index":241,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["rsa/issues",{"_index":564,"title":{},"body":{"properties.html":{}}}],["rsausage",{"_index":344,"title":{},"body":{"index.html":{}}}],["script",{"_index":202,"title":{},"body":{"changelog.html":{}}}],["secure",{"_index":331,"title":{},"body":{"index.html":{}}}],["securely",{"_index":372,"title":{},"body":{"index.html":{}}}],["security",{"_index":339,"title":{},"body":{"index.html":{}}}],["see",{"_index":134,"title":{},"body":{"changelog.html":{}}}],["sell",{"_index":509,"title":{},"body":{"license.html":{}}}],["send",{"_index":385,"title":{},"body":{"index.html":{}}}],["sender",{"_index":382,"title":{},"body":{"index.html":{}}}],["sending",{"_index":380,"title":{},"body":{"index.html":{}}}],["sensitive",{"_index":374,"title":{},"body":{"index.html":{}}}],["server",{"_index":396,"title":{},"body":{"index.html":{}}}],["serverprivatekey",{"_index":398,"title":{},"body":{"index.html":{}}}],["serverpublickey",{"_index":395,"title":{},"body":{"index.html":{}}}],["set",{"_index":244,"title":{},"body":{"changelog.html":{}}}],["shall",{"_index":519,"title":{},"body":{"license.html":{}}}],["signatures",{"_index":412,"title":{},"body":{"index.html":{}}}],["software",{"_index":495,"title":{},"body":{"license.html":{}}}],["solve",{"_index":210,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["solvw",{"_index":215,"title":{},"body":{"changelog.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/NodeRSA.html":{}}}],["spaces",{"_index":299,"title":{},"body":{"miscellaneous/functions.html":{}}}],["specified",{"_index":306,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../convertkettobase64.ts",{"_index":288,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../createprivateandpublickeys.ts",{"_index":289,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../decrypt.ts",{"_index":290,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../decryptstringwithrsaprivatekey.ts",{"_index":291,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../encrypt.ts",{"_index":292,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../encryptstringwithrsapublickey.ts",{"_index":293,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../helpers.ts",{"_index":580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../types.ts",{"_index":574,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/functions/convertkettobase64.ts",{"_index":274,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/functions/createprivateandpublickeys.ts",{"_index":277,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/functions/decrypt.ts",{"_index":278,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/functions/decryptstringwithrsaprivatekey.ts",{"_index":279,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/functions/encrypt.ts",{"_index":280,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/functions/encryptstringwithrsapublickey.ts",{"_index":281,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/index.ts",{"_index":6,"title":{},"body":{"classes/NodeRSA.html":{},"coverage.html":{}}}],["src/index.ts:101",{"_index":75,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/index.ts:112",{"_index":63,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/index.ts:123",{"_index":95,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/index.ts:135",{"_index":84,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/index.ts:25",{"_index":61,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/index.ts:32",{"_index":59,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/index.ts:39",{"_index":55,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/index.ts:46",{"_index":39,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/index.ts:68",{"_index":98,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/index.ts:79",{"_index":89,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/index.ts:90",{"_index":92,"title":{},"body":{"classes/NodeRSA.html":{}}}],["src/utils/helpers.ts",{"_index":283,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/types.ts",{"_index":575,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["standard",{"_index":135,"title":{},"body":{"changelog.html":{}}}],["started",{"_index":128,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":273,"title":{},"body":{"coverage.html":{}}}],["steps",{"_index":430,"title":{},"body":{"index.html":{}}}],["str",{"_index":581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":16,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":230,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["subject",{"_index":514,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":507,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":521,"title":{},"body":{"license.html":{}}}],["support",{"_index":146,"title":{},"body":{"changelog.html":{}}}],["supports",{"_index":15,"title":{},"body":{"classes/NodeRSA.html":{}}}],["sure",{"_index":456,"title":{},"body":{"index.html":{}}}],["systems",{"_index":335,"title":{},"body":{"index.html":{}}}],["table",{"_index":286,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":285,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":229,"title":{},"body":{"changelog.html":{}}}],["terms",{"_index":468,"title":{},"body":{"index.html":{}}}],["tests",{"_index":220,"title":{},"body":{"changelog.html":{}}}],["text",{"_index":80,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["thank",{"_index":479,"title":{},"body":{"index.html":{}}}],["this.decryptstringwithrsaprivatekey",{"_index":122,"title":{},"body":{"classes/NodeRSA.html":{}}}],["this.encryptstringwithrsapublickey",{"_index":120,"title":{},"body":{"classes/NodeRSA.html":{}}}],["this.keybase64",{"_index":112,"title":{},"body":{"classes/NodeRSA.html":{}}}],["this.moduluslength",{"_index":69,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["this.privatekey",{"_index":111,"title":{},"body":{"classes/NodeRSA.html":{}}}],["this.publickey",{"_index":110,"title":{},"body":{"classes/NodeRSA.html":{}}}],["throw",{"_index":587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tort",{"_index":544,"title":{},"body":{"license.html":{}}}],["tracker",{"_index":473,"title":{},"body":{"index.html":{}}}],["transmission",{"_index":333,"title":{},"body":{"index.html":{}}}],["transmit",{"_index":373,"title":{},"body":{"index.html":{}}}],["try",{"_index":582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["type",{"_index":46,"title":{},"body":{"classes/NodeRSA.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":572,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":369,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":556,"title":{},"body":{"properties.html":{}}}],["undefined",{"_index":58,"title":{},"body":{"classes/NodeRSA.html":{}}}],["update",{"_index":204,"title":{},"body":{"changelog.html":{}}}],["usage",{"_index":401,"title":{},"body":{"index.html":{}}}],["use",{"_index":324,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["used",{"_index":60,"title":{},"body":{"classes/NodeRSA.html":{},"index.html":{}}}],["user",{"_index":392,"title":{},"body":{"index.html":{}}}],["username:password",{"_index":394,"title":{},"body":{"index.html":{}}}],["uses",{"_index":318,"title":{},"body":{"miscellaneous/functions.html":{}}}],["using",{"_index":12,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["utf",{"_index":317,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["utilities",{"_index":370,"title":{},"body":{"index.html":{}}}],["utils/types",{"_index":107,"title":{},"body":{"classes/NodeRSA.html":{}}}],["value",{"_index":68,"title":{},"body":{"classes/NodeRSA.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":284,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":579,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifying",{"_index":418,"title":{},"body":{"index.html":{}}}],["version",{"_index":136,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["warranties",{"_index":528,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":523,"title":{},"body":{"license.html":{}}}],["welcome",{"_index":424,"title":{},"body":{"index.html":{}}}],["whether",{"_index":541,"title":{},"body":{"license.html":{}}}],["without",{"_index":499,"title":{},"body":{"license.html":{}}}],["work",{"_index":212,"title":{},"body":{"changelog.html":{}}}],["world",{"_index":355,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":343,"title":{},"body":{"index.html":{}}}],["yes",{"_index":48,"title":{},"body":{"classes/NodeRSA.html":{}}}],["you'd",{"_index":426,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/NodeRSA.html":{"url":"classes/NodeRSA.html","title":"class - NodeRSA","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NodeRSA\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/index.ts\n        \n\n\n            \n                Description\n            \n            \n                NodeRSA class provides encryption and decryption methods using RSA keys.\nIt supports string and buffer encryption/decryption with both public and private keys.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                keyBase64\n                            \n                            \n                                    Private\n                                modulusLength\n                            \n                            \n                                    Private\n                                privateKey\n                            \n                            \n                                    Private\n                                publicKey\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createPrivateAndPublicKeys\n                            \n                            \n                                    Public\n                                decrypt\n                            \n                            \n                                    Public\n                                decryptBufferWithRsaPrivateKey\n                            \n                            \n                                    Public\n                                decryptStringWithRsaPrivateKey\n                            \n                            \n                                    Public\n                                encrypt\n                            \n                            \n                                    Public\n                                encryptBufferWithRsaPublicKey\n                            \n                            \n                                    Public\n                                encryptStringWithRsaPublicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(publicKey?: string, privateKey?: string, modulusLength?: number)\n                    \n                \n                        \n                            \n                                Defined in src/index.ts:46\n                            \n                        \n\n                \n                    \n                            Constructs a new instance of the NodeRSA class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        publicKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nOptional public key for encryption.\n\n\n                                                        \n                                                \n                                                \n                                                        privateKey\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nOptional private key for decryption.\n\n\n                                                        \n                                                \n                                                \n                                                        modulusLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                \nLength of the RSA modulus in bits.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        keyBase64\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/index.ts:46\n                        \n                    \n\n            \n                \n                    Encoding format for the keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        modulusLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/index.ts:39\n                        \n                    \n\n            \n                \n                    Length of the RSA modulus, defaults to 2048 bits.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/index.ts:32\n                        \n                    \n\n            \n                \n                    Private key used for decryption.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        publicKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/index.ts:25\n                        \n                    \n\n            \n                \n                    Public key used for encryption.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createPrivateAndPublicKeys\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPrivateAndPublicKeys(modulusLength: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/index.ts:112\n                        \n                    \n\n\n            \n                \n                        Creates a pair of RSA private and public keys with the given modulus length.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                modulusLength\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    this.modulusLength\n                                            \n\n                                            \n                                                    \nLength of the RSA modulus in bits.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         returnCreateKeys\n\n                        \n                            \n                                The generated RSA private and public keys.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        decrypt\n                        \n                    \n                \n            \n            \n                \n                        \n                    decrypt(args: parametersOfDecryptPublic)\n                \n            \n\n\n                    \n                        \n                            Defined in src/index.ts:101\n                        \n                    \n\n\n            \n                \n                        Decrypts a string using the RSA public key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            parametersOfDecryptPublic\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nParameters for decryption, including the encrypted text and public key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Decrypted plain text string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        decryptBufferWithRsaPrivateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    decryptBufferWithRsaPrivateKey(encryptedText: string, privateKey?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/index.ts:135\n                        \n                    \n\n\n            \n                \n                        Decrypts a buffer using the RSA private key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                encryptedText\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe encrypted base64 string to decrypt.\n\n\n                                            \n                                        \n                                        \n                                                privateKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional private key for decryption.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Buffer\n\n                        \n                            \n                                Decrypted buffer.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        decryptStringWithRsaPrivateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    decryptStringWithRsaPrivateKey(args: parametersOfDecrypt)\n                \n            \n\n\n                    \n                        \n                            Defined in src/index.ts:79\n                        \n                    \n\n\n            \n                \n                        Decrypts a string using the RSA private key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            parametersOfDecrypt\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nParameters for decryption, including the encrypted text and private key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Decrypted plain text string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        encrypt\n                        \n                    \n                \n            \n            \n                \n                        \n                    encrypt(args: parametersOfEncryptPrivate)\n                \n            \n\n\n                    \n                        \n                            Defined in src/index.ts:90\n                        \n                    \n\n\n            \n                \n                        Encrypts a string using the RSA private key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            parametersOfEncryptPrivate\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nParameters for encryption, including the text and private key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Encrypted string in base64 format.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        encryptBufferWithRsaPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    encryptBufferWithRsaPublicKey(buffer: Buffer, publicKey?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/index.ts:123\n                        \n                    \n\n\n            \n                \n                        Encrypts a buffer using the RSA public key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                buffer\n                                            \n                                                        Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe buffer to encrypt.\n\n\n                                            \n                                        \n                                        \n                                                publicKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional public key for encryption.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Encrypted buffer as a base64 string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        encryptStringWithRsaPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    encryptStringWithRsaPublicKey(args: parametersOfEncrypt)\n                \n            \n\n\n                    \n                        \n                            Defined in src/index.ts:68\n                        \n                    \n\n\n            \n                \n                        Encrypts a string using the RSA public key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            parametersOfEncrypt\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nParameters for encryption, including the text and public key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Encrypted string in base64 format.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import convertKetToBase64 from './functions/convertKetToBase64';\nimport createPrivateAndPublicKeys from './functions/createPrivateAndPublicKeys';\nimport decrypt from './functions/decrypt';\nimport decryptStringWithRsaPrivateKey from './functions/decryptStringWithRsaPrivateKey';\nimport encrypt from './functions/encrypt';\nimport encryptStringWithRsaPublicKey from './functions/encryptStringWithRsaPublicKey';\nimport {\n  parametersOfDecrypt,\n  parametersOfDecryptPublic,\n  parametersOfEncrypt,\n  parametersOfEncryptPrivate,\n  returnCreateKeys,\n} from './utils/types';\n\n/**\n * NodeRSA class provides encryption and decryption methods using RSA keys.\n * It supports string and buffer encryption/decryption with both public and private keys.\n */\nclass NodeRSA {\n  /**\n     * @private\n     * @type {string | undefined}\n     * Public key used for encryption.\n     */\n  private publicKey: string | undefined;\n\n  /**\n     * @private\n     * @type {string | undefined}\n     * Private key used for decryption.\n     */\n  private privateKey: string | undefined;\n\n  /**\n     * @private\n     * @type {number}\n     * Length of the RSA modulus, defaults to 2048 bits.\n     */\n  private modulusLength: number;\n\n  /**\n     * @private\n     * @type {'base64'}\n     * Encoding format for the keys.\n     */\n  private keyBase64: 'base64';\n\n  /**\n     * Constructs a new instance of the NodeRSA class.\n     *\n     * @param {string} [publicKey] - Optional public key for encryption.\n     * @param {string} [privateKey] - Optional private key for decryption.\n     * @param {number} [modulusLength=2048] - Length of the RSA modulus in bits.\n     */\n  constructor(publicKey?: string, privateKey?: string, modulusLength?: number) {\n    this.publicKey = publicKey;\n    this.privateKey = privateKey;\n    this.modulusLength = modulusLength || 2048;\n    this.keyBase64 = 'base64';\n  }\n\n  /**\n     * Encrypts a string using the RSA public key.\n     *\n     * @param {parametersOfEncrypt} args - Parameters for encryption, including the text and public key.\n     * @returns {string} Encrypted string in base64 format.\n     */\n  public encryptStringWithRsaPublicKey(args: parametersOfEncrypt): string {\n    const { publicKey = this.publicKey } = args;\n    return encryptStringWithRsaPublicKey({ ...args, publicKey: convertKetToBase64(publicKey as string) });\n  }\n\n  /**\n     * Decrypts a string using the RSA private key.\n     *\n     * @param {parametersOfDecrypt} args - Parameters for decryption, including the encrypted text and private key.\n     * @returns {string} Decrypted plain text string.\n     */\n  public decryptStringWithRsaPrivateKey(args: parametersOfDecrypt): string {\n    const { privateKey = this.privateKey } = args;\n    return decryptStringWithRsaPrivateKey({ ...args, privateKey: convertKetToBase64(privateKey as string) });\n  }\n\n  /**\n     * Encrypts a string using the RSA private key.\n     *\n     * @param {parametersOfEncryptPrivate} args - Parameters for encryption, including the text and private key.\n     * @returns {string} Encrypted string in base64 format.\n     */\n  public encrypt(args: parametersOfEncryptPrivate): string {\n    const { privateKey = this.privateKey } = args;\n    return encrypt({ ...args, privateKey: convertKetToBase64(privateKey as string) });\n  }\n\n  /**\n     * Decrypts a string using the RSA public key.\n     *\n     * @param {parametersOfDecryptPublic} args - Parameters for decryption, including the encrypted text and public key.\n     * @returns {string} Decrypted plain text string.\n     */\n  public decrypt(args: parametersOfDecryptPublic): string {\n    const { publicKey = this.publicKey } = args;\n    return decrypt({ ...args, publicKey: convertKetToBase64(publicKey as string) });\n  }\n\n  /**\n     * Creates a pair of RSA private and public keys with the given modulus length.\n     *\n     * @param {number} [modulusLength=this.modulusLength] - Length of the RSA modulus in bits.\n     * @returns {returnCreateKeys} The generated RSA private and public keys.\n     */\n  public createPrivateAndPublicKeys(modulusLength: number = this.modulusLength): returnCreateKeys {\n    return createPrivateAndPublicKeys(modulusLength);\n  }\n\n  /**\n     * Encrypts a buffer using the RSA public key.\n     *\n     * @param {Buffer} buffer - The buffer to encrypt.\n     * @param {string} [publicKey] - Optional public key for encryption.\n     * @returns {string} Encrypted buffer as a base64 string.\n     */\n  public encryptBufferWithRsaPublicKey(buffer: Buffer, publicKey?: string): string {\n    const base64String = buffer.toString(this.keyBase64);\n    return this.encryptStringWithRsaPublicKey({ text: base64String, publicKey });\n  }\n\n  /**\n     * Decrypts a buffer using the RSA private key.\n     *\n     * @param {string} encryptedText - The encrypted base64 string to decrypt.\n     * @param {string} [privateKey] - Optional private key for decryption.\n     * @returns {Buffer} Decrypted buffer.\n     */\n  public decryptBufferWithRsaPrivateKey(encryptedText: string, privateKey?: string): Buffer {\n    const decryptedBase64 = this.decryptStringWithRsaPrivateKey({ text: encryptedText, privateKey });\n    return Buffer.from(decryptedBase64, this.keyBase64);\n  }\n}\n\nexport default NodeRSA;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n3.2.0 (2024-10-09)\nFeatures\n\nindex.ts: add support for encrypt and decrypt buffer (4737bae), closes #26\n\n3.1.1 (2024-08-15)\nBug Fixes\n\ndocs (ce1f031)\n\n3.1.0 (2024-07-21)\nBug Fixes\n\nresolve issue with enctypt and descrpt: resolve issue (#36) (a828288)\n\n3.0.1 (2024-05-14)\nBug Fixes\n\nissue (1bd3dba)\n\n3.0.0 (2024-05-14)\n2.2.3 (2024-05-14)\n2.2.2 (2024-05-14)\n2.2.1 (2024-05-14)\n2.2.0 (2024-05-14)\nFeatures\n\nchange the main functions: deprectate the old encrypt and decrypt function and create new (01288ba)\n\n2.1.5 (2023-02-28)\nChores\n\nsupport node greater than 18 and npm greater than 8 (005cf394)\n\n2.1.4 (2023-01-24)\n2.1.2 (2022-06-04)\nChores\n\n🤖 add prebuilsh script (8b49642f)\n🤖 update npm ignore (06a02399)\n\nDocumentation Changes\n\n✏️ update docs (0e0f4c9e)\n\n2.1.1 (2022-06-02)\nBug Fixes\n\n🐛 solve github work flow (f5c1c45e)\n🐛 solvw conflicts (00bd0481)\n\n2.1.0 (2022-06-02)\nDocumentation Changes\n\n✏️ update docs (dbb771af)\n\nTests\n\n💍 add tests (79b17826)\n\n2.0.1 (2022-06-02)\nDocumentation Changes\n\n✏️ update docs (dbb771af)\n\nTests\n\n💍 add tests (79b17826)\n\n2.0.0 (2022-03-23)\nDocumentation Changes\n\nupdate docs (e4e3f254)\nupdate docs (de0f8024)\n\nNew Features\n\nmake methods to take public and private keys as strings (d47af0f5)\nadd new helper methods to decode and encode keys to base64 (d3cba4c0)\nupdate the docs (4e470c6f)\n\nTests\n\nadd tests (373d6c12)\n\n1.2.1 (2022-02-11)\nDocumentation Changes\n\nupdate docs (846687b4)\n\nNew Features\n\nadd encrypt-rsa.js.org (3f6b0b4e)\n\n1.2.0 (2022-02-09)\nDocumentation Changes\n\nset docs (6f1fa5e3)\n\n1.1.0 (2021-07-21)\nDocumentation Changes\n\n✏️ update docs for creating keys (cebb2758)\n\nNew Features\n\n🎸 add create public and private keys (74c51131)\n\n1.0.12 (2021-07-20)\nChores\n\n🤖 update keywords (b435e3ba)\n\n1.0.11 (2021-07-20)\nBug Fixes\n\n🐛 solve docs (8a08c44e)\n\n1.0.10 (2021-07-20)\nDocumentation Changes\n\n✏️ update readme (e29f1805)\n\n1.0.9 (2021-07-19)\n1.0.8 (2021-07-19)\n1.0.8 (2021-07-19)\n1.0.5 (2021-07-19)\n1.0.4 (2021-07-19)\n1.0.4 (2021-07-19)\n1.0.3 (2021-07-19)\n1.0.2 (2021-07-19)\n1.0.1 (2021-07-19)\nOther Changes\n\nmiladezzat/rsa-node (5f3c40de)\n\n1.0.0 (2021-07-18)\nOther Changes\n\nmiladezzat/rsa-node (5f3c40de)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/functions/convertKetToBase64.ts\n            \n            function\n            convertKetToBase64\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/functions/createPrivateAndPublicKeys.ts\n            \n            function\n            createPrivateAndPublicKeys\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/functions/decrypt.ts\n            \n            function\n            decrypt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/functions/decryptStringWithRsaPrivateKey.ts\n            \n            function\n            decryptStringWithRsaPrivateKey\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/functions/encrypt.ts\n            \n            function\n            encrypt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/functions/encryptStringWithRsaPublicKey.ts\n            \n            function\n            encryptStringWithRsaPublicKey\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            class\n            NodeRSA\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/utils/helpers.ts\n            \n            variable\n            decode\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/helpers.ts\n            \n            variable\n            encode\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            convertKetToBase64   (src/.../convertKetToBase64.ts)\n                        \n                        \n                            createPrivateAndPublicKeys   (src/.../createPrivateAndPublicKeys.ts)\n                        \n                        \n                            decrypt   (src/.../decrypt.ts)\n                        \n                        \n                            decryptStringWithRsaPrivateKey   (src/.../decryptStringWithRsaPrivateKey.ts)\n                        \n                        \n                            encrypt   (src/.../encrypt.ts)\n                        \n                        \n                            encryptStringWithRsaPublicKey   (src/.../encryptStringWithRsaPublicKey.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/functions/convertKetToBase64.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        convertKetToBase64\n                        \n                    \n                \n            \n            \n                \nconvertKetToBase64(key: string)\n                \n            \n\n\n\n\n            \n                \n                        Converts an RSA key to a base64-encoded string.\nThis function removes any leading spaces from each line of the key and then\nencodes it to base64 format.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe RSA key to be converted to base64. It may contain leading spaces in each line.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The base64-encoded version of the RSA key.\n\n                            \n                \n            \n        \n    \n    src/functions/createPrivateAndPublicKeys.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createPrivateAndPublicKeys\n                        \n                    \n                \n            \n            \n                \ncreatePrivateAndPublicKeys(modulusLength: number)\n                \n            \n\n\n\n\n            \n                \n                        Generates a pair of RSA private and public keys with the specified modulus length.\nIf the crypto.generateKeyPairSync function is available, it generates the keys using the provided modulus length,\notherwise, it returns empty strings for both keys.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                modulusLength\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    2048\n                                            \n\n                                            \n                                                    \nThe length of the RSA modulus in bits. Defaults to 2048 bits.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         returnCreateKeys\n\n                        \n                            \n                                An object containing the generated RSA public and private keys in PEM format.\n\n                            \n                \n            \n        \n    \n    src/functions/decrypt.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        decrypt\n                        \n                    \n                \n            \n            \n                \ndecrypt(args: parametersOfDecryptPublic)\n                \n            \n\n\n\n\n            \n                \n                        Decrypts a base64-encoded string using an RSA public key.\nThe function first decodes the provided RSA public key and the base64-encoded text,\nthen decrypts the text using the RSA public key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            parametersOfDecryptPublic\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn object containing the text to decrypt and the RSA public key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The decrypted string in UTF-8 format.\n\n                            \n                \n            \n        \n    \n    src/functions/decryptStringWithRsaPrivateKey.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        decryptStringWithRsaPrivateKey\n                        \n                    \n                \n            \n            \n                \ndecryptStringWithRsaPrivateKey(args: parametersOfDecrypt)\n                \n            \n\n\n\n\n            \n                \n                        Decrypts a base64-encoded string using an RSA private key.\nThis function decodes the provided RSA private key, then uses it to decrypt the base64-encoded string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            parametersOfDecrypt\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn object containing the text to decrypt and the RSA private key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The decrypted string in UTF-8 format.\n\n                            \n                \n            \n        \n    \n    src/functions/encrypt.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        encrypt\n                        \n                    \n                \n            \n            \n                \nencrypt(args: parametersOfEncryptPrivate)\n                \n            \n\n\n\n\n            \n                \n                        Encrypts a string using an RSA private key.\nThis function encodes the provided RSA private key, converts the input text to a buffer,\nand encrypts it using the private key. The result is returned as a base64-encoded string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            parametersOfEncryptPrivate\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn object containing the text to encrypt and the RSA private key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The encrypted string in base64 format.\n\n                            \n                \n            \n        \n    \n    src/functions/encryptStringWithRsaPublicKey.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        encryptStringWithRsaPublicKey\n                        \n                    \n                \n            \n            \n                \nencryptStringWithRsaPublicKey(args: parametersOfEncrypt)\n                \n            \n\n\n\n\n            \n                \n                        Encrypts a string using an RSA public key.\nThis function decodes the provided RSA public key, converts the input text into a buffer,\nand encrypts it using the public key. The encrypted result is returned as a base64-encoded string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            parametersOfEncrypt\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn object containing the text to encrypt and the RSA public key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The encrypted string in base64 format.\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNodeRSA\nNodeRSA is a library that provides easy-to-use methods for RSA encryption and decryption. It allows generating RSA key pairs, encrypting, and decrypting strings with RSA public and private keys. This library is ideal for secure data transmission, authentication systems, and any application requiring cryptographic security.\nInstallation\nExample :npm install encrypt-rsa\n// OR\nyarn add encrypt-rsaUsage\nImporting the Library\nExample :import NodeRSA from 'encrypt-rsa';Creating an Instance\nYou can create an instance of the NodeRSA class with optional public and private keys and modulus length.\nExample :const nodeRSA = new NodeRSA(publicKey, privateKey, modulusLength);Generating RSA Key Pairs\nTo generate a new pair of RSA keys:\nExample :const { publicKey, privateKey } = nodeRSA.createPrivateAndPublicKeys(modulusLength);\nconsole.log('Public Key:', publicKey);\nconsole.log('Private Key:', privateKey);Encrypting and Decrypting Strings\nEncrypting with RSA Public Key\nExample :const text = \"Hello, World!\";\nconst encryptedString = nodeRSA.encryptStringWithRsaPublicKey({ text, publicKey });\nconsole.log('Encrypted:', encryptedString);Decrypting with RSA Private Key\nExample :const decryptedString = nodeRSA.decryptStringWithRsaPrivateKey({ text: encryptedString, privateKey });\nconsole.log('Decrypted:', decryptedString);Encrypting with RSA Private Key\nExample :const text = \"Hello, World!\";\nconst encryptedString = nodeRSA.encrypt({ text, privateKey });\nconsole.log('Encrypted with Private Key:', encryptedString);Decrypting with RSA Public Key\nExample :const decryptedString = nodeRSA.decrypt({ text: encryptedString, publicKey });\nconsole.log('Decrypted with Public Key:', decryptedString);API\nNodeRSA Class\nConstructor\nExample :constructor(publicKey?: string, privateKey?: string, modulusLength?: number)\npublicKey: Optional. The RSA public key.\nprivateKey: Optional. The RSA private key.\nmodulusLength: Optional. The modulus length for the RSA key pair (default is 2048).\n\nMethods\n\ncreatePrivateAndPublicKeys(modulusLength: number = this.modulusLength): returnCreateKeys\n\nGenerates a new pair of RSA keys.\nmodulusLength: Optional. The modulus length for the RSA key pair (default is the instance's modulus length).\nReturns an object containing the publicKey and privateKey.\n\n\nencryptStringWithRsaPublicKey(args: parametersOfEncrypt): string\n\nEncrypts a string with the given RSA public key.\nargs: Object containing text and optionally publicKey.\nReturns the encrypted string in base64 format.\n\n\ndecryptStringWithRsaPrivateKey(args: parametersOfDecrypt): string\n\nDecrypts a string with the given RSA private key.\nargs: Object containing text and optionally privateKey.\nReturns the decrypted string.\n\n\nencrypt(args: parametersOfEncryptPrivate): string\n - Encrypts a string with the given RSA private key.\n - args: Object containing text and optionally privateKey.\n - Returns the encrypted string in base64 format.\n\ndecrypt(args: parametersOfDecryptPublic): string\n\nDecrypts a string with the given RSA public key.\nargs: Object containing text and optionally publicKey.\nReturns the decrypted string.\n\n\n\nTypes\n\nparametersOfEncrypt\n\nExample :{\n  text: string;\n  publicKey?: string;\n}\nparametersOfDecrypt\n\nExample :{\n  text: string;\n  privateKey?: string;\n}\nparametersOfEncryptPrivate\n\nExample :{\n  text: string;\n  privateKey?: string;\n}\nparametersOfDecryptPublic\n\nExample :{\n  text: string;\n  publicKey?: string;\n}\nreturnCreateKeys\n\nExample :{\n  publicKey: string;\n  privateKey: string;\n}Utilities\n\nconvertKetToBase64(key: string): string \nConverts a given key to base64 format.\n\nHelper Functions\n\nencode\nEncodes a string to base64.\n\ndecode\nDecodes a base64 string.\n\n\nUse Cases\nSecure Data Transmission\nNodeRSA can be used to securely transmit sensitive data over insecure channels. Encrypt data with the recipient's public key before sending it. Only the recipient can decrypt the data with their private key.\nExample :// Sender\nconst encryptedMessage = nodeRSA.encryptStringWithRsaPublicKey({ text: \"Sensitive data\", publicKey: recipientPublicKey });\n// Send `encryptedMessage` to the recipient\n\n// Recipient\nconst decryptedMessage = nodeRSA.decryptStringWithRsaPrivateKey({ text: encryptedMessage, privateKey: recipientPrivateKey });\nconsole.log('Decrypted Message:', decryptedMessage);Authentication Systems\nNodeRSA can be used in authentication systems to encrypt credentials and sensitive information.\nExample :// Encrypting user credentials\nconst encryptedCredentials = nodeRSA.encryptStringWithRsaPublicKey({ text: \"username:password\", publicKey: serverPublicKey });\n\n// Decrypting credentials on the server\nconst decryptedCredentials = nodeRSA.decryptStringWithRsaPrivateKey({ text: encryptedCredentials, privateKey: serverPrivateKey });\nconsole.log('Decrypted Credentials:', decryptedCredentials);Buffer Encryption/Decryption Methods:\n\nencryptBufferWithRsaPublicKey: Converts a buffer to Base64 and then encrypts the Base64 string.\ndecryptBufferWithRsaPrivateKey: Decrypts the Base64 string and converts it back to a buffer.\n\nExample Usage\nExample :const nodeRSA = new NodeRSA();\n\n// Generate keys\nconst { publicKey, privateKey } = nodeRSA.createPrivateAndPublicKeys();\n\n// Example buffer\nconst buffer = Buffer.from('This is some binary data');\n\n// Encrypt the buffer\nconst encryptedBuffer = nodeRSA.encryptBufferWithRsaPublicKey(buffer, publicKey);\nconsole.log('Encrypted Buffer:', encryptedBuffer);\n\n// Decrypt back to buffer\nconst decryptedBuffer = nodeRSA.decryptBufferWithRsaPrivateKey(encryptedBuffer, privateKey);\nconsole.log('Decrypted Buffer:', decryptedBuffer.toString());  // should log: 'This is some binary data'Digital Signatures\nAlthough not directly covered by the current implementation, RSA can also be used for creating and verifying digital signatures to ensure data integrity and authenticity.\nContribution\nWe welcome contributions to the NodeRSA library! If you'd like to contribute, please follow these steps:\n\nFork the repository on GitHub.\nClone your forked repository to your local machine.\n\nExample :git clone git@github.com:miladezzat/encrypt-rsa.git\nCreate a new branch for your feature or bugfix.\n\nExample :git checkout -b feature/your-feature-name\nMake your changes to the codebase.\nCommit your changes with a clear and descriptive commit message.\n\nExample :git commit -m \"Description of your feature or fix\"\nPush your changes to your forked repository.\n\nExample :git push origin feature/your-feature-name\nCreate a pull request on the original repository. Be sure to include a detailed description of your changes and the problem they solve.\n\nCode of Conduct\nPlease note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.\nReporting Issues\nIf you encounter any issues, please report them using the GitHub issue tracker. Include details about the problem and your environment (OS, Node.js version, etc.).\nThank you for contributing to NodeRSA!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 Milad Ezzat\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 3.2.0\n        \n            Description : This is a little module use to encrypt and decrypt strings with RSA keys (public and private keys)\n        \n            Keywords : algorithm, node, encryption, public key, private key, rsa, node-rsa, encrypt-rsa, encrypt, encrypt by public key, decrypt by private key, rsa encryption, node-rsa typescript, Crypto-js RSA, Javascript RSA encryption\n        \n            Homepage : https://encrypt-rsa.js.org\n        \n            Bugs : https://github.com/miladezzat/encrypt-rsa/issues\n        \n            License : ISC\n        \n            Repository : git+https://github.com/miladezzat/encrypt-rsa.git\n        \n            Author : Milad E. Fahmy  (https://milad-ezzat.vercel.app)\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            parametersOfDecrypt   (src/.../types.ts)\n                        \n                        \n                            parametersOfDecryptPublic   (src/.../types.ts)\n                        \n                        \n                            parametersOfEncrypt   (src/.../types.ts)\n                        \n                        \n                            parametersOfEncryptPrivate   (src/.../types.ts)\n                        \n                        \n                            returnCreateKeys   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/types.ts\n    \n    \n        \n            \n                \n                    \n                    parametersOfDecrypt\n                \n            \n            \n                \n                    Type representing the parameters required to decrypt text using a private key.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    parametersOfDecryptPublic\n                \n            \n            \n                \n                    Type representing the parameters required to decrypt text using a public key.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    parametersOfEncrypt\n                \n            \n            \n                \n                    Type representing the parameters required to encrypt text using a public key.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    parametersOfEncryptPrivate\n                \n            \n            \n                \n                    Type representing the parameters required to encrypt text using a private key.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    returnCreateKeys\n                \n            \n            \n                \n                    Type representing the return value of a function that creates RSA keys.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            decode   (src/.../helpers.ts)\n                        \n                        \n                            encode   (src/.../helpers.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        decode\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (str: string): string => {\n  try {\n    return Buffer.from(str, 'base64').toString('utf-8');\n  } catch (error) {\n    throw new Error('Failed to decode base64 string');\n  }\n}\n                    \n                \n\n            \n                \n                    Decodes a base64-encoded string into a UTF-8 string.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (str: string): string => {\n  try {\n    return Buffer.from(str, 'utf-8').toString('base64');\n  } catch (error) {\n    throw new Error('Failed to encode string to base64');\n  }\n}\n                    \n                \n\n            \n                \n                    Encodes a UTF-8 string into a base64-encoded string.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
